// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 6.0.3 effective-5.10 (swiftlang-6.0.3.1.10 clang-1600.0.30.1)
// swift-module-flags: -target arm64-apple-ios12.1 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-bare-slash-regex -module-name FawryPaySDK
// swift-module-flags-ignorable: -no-verify-emitted-module-interface
import AVFoundation
import AVKit
import Accelerate
import Alamofire
import CommonCrypto
import CoreML
import CoreText
import CryptoKit
import DeveloperToolsSupport
@_exported import FawryPaySDK
import Foundation
import IQKeyboardManagerSwift
import ObjectiveC
import PassKit
import Photos
import Swift
import SwiftUI
import SystemConfiguration
import UIKit
import VideoToolbox
import Vision
import WebKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
import os.log
import os
public class RadioCheckboxBaseContainer<T> where T : FawryPaySDK.RadioCheckboxBaseButton {
  public typealias Kind = T
  public init(_ buttons: [T] = [])
  public var allButtons: [T] {
    get
  }
  public func addButtons(_ buttons: [T])
  public func deselectAll()
  public var selectedButtons: [T] {
    get
    set
  }
  @discardableResult
  public func addButton(_ button: T) -> Swift.Bool
  @discardableResult
  public func removeButton(_ button: T) -> Swift.Bool
  public var buttonStyle: FawryPaySDK.RadioCheckboxStyle? {
    get
    set
  }
  public func setEachButtonStyle(_ body: (T) -> FawryPaySDK.RadioCheckboxStyle)
  public func compact()
  @objc deinit
}
public typealias ExternalCallBackType = ((_ result: (_ response: Swift.Result<FawryPaySDK.PaymentChargeResponse, FawryPaySDK.CustomFawryPayError>) -> Swift.Void) -> Swift.Void)?
public class PaymentMethods : Swift.Codable {
  public var code: Swift.String?
  public var enable: Swift.Bool?
  public var id: Swift.Int?
  public var name: Swift.String?
  public var cardHolderName: Swift.String?
  public var selected: Swift.Bool?
  public var fixedFees: Swift.Double?
  public var maxPercentageFees: Swift.Double?
  public var minPercentageFees: Swift.Double?
  public var percentageFees: Swift.Double?
  public var balance: Swift.Double?
  public var fawryCard: Swift.String
  public var externalCallBack: FawryPaySDK.ExternalCallBackType
  public var paymentMethodExtraFees: [FawryPaySDK.PaymentMethodExtraFees]?
  public var paymetMethodImage: UIKit.UIImage?
  public init(code: Swift.String? = nil, enable: Swift.Bool? = nil, id: Swift.Int? = nil, name: Swift.String? = nil, cardHolderName: Swift.String? = nil, selected: Swift.Bool? = nil, fixedFees: Swift.Double? = nil, maxPercentageFees: Swift.Double? = nil, minPercentageFees: Swift.Double? = nil, percentageFees: Swift.Double? = nil, balance: Swift.Double? = nil, paymentMethodExtraFees: [FawryPaySDK.PaymentMethodExtraFees]? = nil, externalCallBack: FawryPaySDK.ExternalCallBackType = nil, paymetMethodImage: UIKit.UIImage? = nil)
  required public init(from decoder: any Swift.Decoder) throws
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
}
public struct PaymentMethodExtraFees : Swift.Codable {
  public let id: Swift.Int?
  public let minTierAmount: Swift.Double?
  public let maxTierAmount: Swift.Double?
  public let fixedFees: Swift.Double?
  public let percentageFees: Swift.Double?
  public let minPercentageFees: Swift.Double?
  public let maxPercentageFees: Swift.Double?
  public let feesTypeLookup: Swift.String?
  public let accountTypeCode: Swift.String?
  public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
}
@_hasMissingDesignatedInitializers public class AccountTypeInfo : Swift.Codable {
  public var fpCard: Swift.Bool?
  public var beanosCard: Swift.Bool?
  public var bmisCard: Swift.Bool?
  public var masterCard: Swift.Bool?
  public var meezaCard: Swift.Bool?
  public var visaCard: Swift.Bool?
  public enum CodingKeys : Swift.String, Swift.CodingKey {
    case fpCard
    case beanosCard
    case bmisCard
    case masterCard
    case meezaCard
    case visaCard
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias RawValue = Swift.String
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@objc @_inheritsConvenienceInitializers public class FawrySDKConfigurationManager : ObjectiveC.NSObject {
  public class var shared: FawryPaySDK.FawrySDKConfigurationManager! {
    get
  }
  public func loadConfigurations(with baseURL: Swift.String? = nil)
  public func setAppLanguage(lang: Swift.String?)
  public func getServerAddress() -> Swift.String
  public func getAppLanguage() -> Swift.String
  @objc override dynamic public init()
  @objc deinit
}
public struct Expiry : Swift.Hashable {
  public let string: Swift.String
  public let month: Swift.UInt
  public let year: Swift.UInt
  public static func == (lhs: FawryPaySDK.Expiry, rhs: FawryPaySDK.Expiry) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@objc @_inheritsConvenienceInitializers public class Validator : ObjectiveC.NSObject {
  @objc override dynamic public init()
  @objc deinit
}
public struct OrderPriceDetails : Swift.Codable {
  public let subTotal: Swift.Double?
  public let totalAmount: Swift.Double?
  public let fawryFees: Swift.Double?
  public let taxes: Swift.Double?
  public init(subTotal: Swift.Double?, totalAmount: Swift.Double?, fawryFees: Swift.Double?, taxes: Swift.Double?)
  public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
}
@objc public class LaunchCustomerModel : ObjectiveC.NSObject, Swift.Codable {
  public init(customerName: Swift.String?, customerEmail: Swift.String?, customerMobile: Swift.String?)
  public init(customerName: Swift.String?, customerEmail: Swift.String?, customerMobile: Swift.String?, customerProfileId: Swift.String?, token: Swift.String? = nil)
  public init(customerName: Swift.String?, customerEmail: Swift.String?, customerMobile: Swift.String?, token: Swift.String?, customerProfileId: Swift.String?)
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
public enum MWalletOption {
  case Notification, QRCode
  public static func == (a: FawryPaySDK.MWalletOption, b: FawryPaySDK.MWalletOption) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public class MWalletInfo {
  public var selectedOption: FawryPaySDK.MWalletOption
  public var mobNum: Swift.String?
  public init(selectedOption: FawryPaySDK.MWalletOption, mobNum: Swift.String?)
  @objc deinit
}
public struct Api {
  public struct ApiError : Swift.Error {
  }
  public static var lastScanStatsSuccess: Foundation.Date?
  public typealias ApiCompletion = ((_ response: [Swift.String : Any]?, _ error: FawryPaySDK.Api.ApiError?) -> Swift.Void)
  public static func apiCallWithDeviceInfo(endpoint: Swift.String, parameters: [Swift.String : Any], completion: @escaping FawryPaySDK.Api.ApiCompletion)
}
public class LaunchApplePayModel : Swift.Codable {
  public init(merchantID: Swift.String?)
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor @preconcurrency public class BlurView : UIKit.UIView {
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor @preconcurrency public func maskToRoi(roi: UIKit.UIView)
  @objc deinit
}
extension UIKit.UIView {
  @_Concurrency.MainActor @preconcurrency public func makeToast(_ message: Swift.String?, duration: Foundation.TimeInterval = ToastManager.shared.duration, position: FawryPaySDK.ToastPosition = ToastManager.shared.position, title: Swift.String? = nil, image: UIKit.UIImage? = nil, style: FawryPaySDK.ToastStyle = ToastManager.shared.style, completion: ((_ didTap: Swift.Bool) -> Swift.Void)? = nil)
  @_Concurrency.MainActor @preconcurrency public func makeToast(_ message: Swift.String?, duration: Foundation.TimeInterval = ToastManager.shared.duration, point: CoreFoundation.CGPoint, title: Swift.String?, image: UIKit.UIImage?, style: FawryPaySDK.ToastStyle = ToastManager.shared.style, completion: ((_ didTap: Swift.Bool) -> Swift.Void)?)
  @_Concurrency.MainActor @preconcurrency public func showToast(_ toast: UIKit.UIView, duration: Foundation.TimeInterval = ToastManager.shared.duration, position: FawryPaySDK.ToastPosition = ToastManager.shared.position, completion: ((_ didTap: Swift.Bool) -> Swift.Void)? = nil)
  @_Concurrency.MainActor @preconcurrency public func showToast(_ toast: UIKit.UIView, duration: Foundation.TimeInterval = ToastManager.shared.duration, point: CoreFoundation.CGPoint, completion: ((_ didTap: Swift.Bool) -> Swift.Void)? = nil)
  @_Concurrency.MainActor @preconcurrency public func hideToast()
  @_Concurrency.MainActor @preconcurrency public func hideToast(_ toast: UIKit.UIView)
  @_Concurrency.MainActor @preconcurrency public func hideAllToasts(includeActivity: Swift.Bool = false, clearQueue: Swift.Bool = true)
  @_Concurrency.MainActor @preconcurrency public func clearToastQueue()
  @_Concurrency.MainActor @preconcurrency public func makeToastActivity(_ position: FawryPaySDK.ToastPosition)
  @_Concurrency.MainActor @preconcurrency public func makeToastActivity(_ point: CoreFoundation.CGPoint)
  @_Concurrency.MainActor @preconcurrency public func hideToastActivity()
  @_Concurrency.MainActor @preconcurrency public func toastViewForMessage(_ message: Swift.String?, title: Swift.String?, image: UIKit.UIImage?, style: FawryPaySDK.ToastStyle) throws -> UIKit.UIView
}
public struct ToastStyle {
  public init()
  public var backgroundColor: UIKit.UIColor
  public var titleColor: UIKit.UIColor
  public var messageColor: UIKit.UIColor
  public var maxWidthPercentage: CoreFoundation.CGFloat {
    get
    set
  }
  public var maxHeightPercentage: CoreFoundation.CGFloat {
    get
    set
  }
  public var horizontalPadding: CoreFoundation.CGFloat
  public var verticalPadding: CoreFoundation.CGFloat
  public var cornerRadius: CoreFoundation.CGFloat
  public var titleFont: UIKit.UIFont
  public var messageFont: UIKit.UIFont
  public var titleAlignment: UIKit.NSTextAlignment
  public var messageAlignment: UIKit.NSTextAlignment
  public var titleNumberOfLines: Swift.Int
  public var messageNumberOfLines: Swift.Int
  public var displayShadow: Swift.Bool
  public var shadowColor: UIKit.UIColor
  public var shadowOpacity: Swift.Float {
    get
    set
  }
  public var shadowRadius: CoreFoundation.CGFloat
  public var shadowOffset: CoreFoundation.CGSize
  public var imageSize: CoreFoundation.CGSize
  public var activitySize: CoreFoundation.CGSize
  public var fadeDuration: Swift.Double
  public var activityIndicatorColor: UIKit.UIColor
  public var activityBackgroundColor: UIKit.UIColor
}
@_hasMissingDesignatedInitializers public class ToastManager {
  public class var shared: FawryPaySDK.ToastManager! {
    get
  }
  public var style: FawryPaySDK.ToastStyle
  public var isTapToDismissEnabled: Swift.Bool
  public var isQueueEnabled: Swift.Bool
  public var duration: Swift.Double
  public var position: FawryPaySDK.ToastPosition
  @objc deinit
}
public enum ToastPosition {
  case top
  case center
  case bottom
  public static func == (a: FawryPaySDK.ToastPosition, b: FawryPaySDK.ToastPosition) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@objc @_inheritsConvenienceInitializers public class E_WalletManager : ObjectiveC.NSObject {
  public func E_WalletManagerLauncher(onPayWalletUsingMobileNumberCallBacks: FawryPaySDK.CallBacks<FawryPaySDK.PaymentChargeResponse>, onPayUsingQRCodeCallBacks: FawryPaySDK.CallBacks<FawryPaySDK.PaymentChargeResponse>, onVerifyPayUsingWalletCallBacks: FawryPaySDK.CallBacks<FawryPaySDK.PaymentChargeResponse>)
  public func payWalletUsingMobileNumber(with mobileNumber: Swift.String, validateVoucherRequestParams: FawryPaySDK.FPValidateVoucherRequestParams? = nil)
  public func payByWalletUsingQRCode(validateVoucherRequestParams: FawryPaySDK.FPValidateVoucherRequestParams? = nil)
  public func verifyPayUsingWallet(with orderRefNum: Swift.String, isCheckNow: Swift.Bool = false)
  @objc override dynamic public init()
  @objc deinit
}
public struct FilterCriteria {
}
@objc public protocol TestingImageDataSource {
  @objc func nextImage() -> CoreGraphics.CGImage?
}
@_inheritsConvenienceInitializers @objc @_Concurrency.MainActor @preconcurrency open class ScanBaseViewController : UIKit.UIViewController, AVFoundation.AVCaptureVideoDataOutputSampleBufferDelegate, FawryPaySDK.ScanEvents {
  @_Concurrency.MainActor @preconcurrency public func onNumberRecognized(number: Swift.String, expiry: FawryPaySDK.Expiry?, cardImage: CoreGraphics.CGImage, numberBoundingBox: CoreFoundation.CGRect, expiryBoundingBox: CoreFoundation.CGRect?)
  @_Concurrency.MainActor @preconcurrency public func onScanComplete(scanStats: FawryPaySDK.ScanStats)
  @objc @_Concurrency.MainActor @preconcurrency weak public var testingImageDataSource: (any FawryPaySDK.TestingImageDataSource)?
  @objc @_Concurrency.MainActor @preconcurrency public var errorCorrectionDuration: Swift.Double
  @objc @_Concurrency.MainActor @preconcurrency public var includeCardImage: Swift.Bool
  @objc @_Concurrency.MainActor @preconcurrency public var showDebugImageView: Swift.Bool
  @_Concurrency.MainActor @preconcurrency public var scanEventsDelegate: (any FawryPaySDK.ScanEvents)?
  @_Concurrency.MainActor @preconcurrency public static let machineLearningQueue: Dispatch.DispatchQueue
  @objc @_Concurrency.MainActor @preconcurrency open func onScannedCard(number: Swift.String, expiryYear: Swift.String?, expiryMonth: Swift.String?, scannedImage: UIKit.UIImage?)
  @objc @_Concurrency.MainActor @preconcurrency open func showCardNumber(_ number: Swift.String, expiry: Swift.String?)
  @_Concurrency.MainActor @preconcurrency public func toggleTorch()
  @objc @_Concurrency.MainActor @preconcurrency public static func configure(apiKey: Swift.String? = nil)
  @objc @_Concurrency.MainActor @preconcurrency public static func isCompatible() -> Swift.Bool
  @objc @_Concurrency.MainActor @preconcurrency public static func cameraImage() -> UIKit.UIImage?
  @_Concurrency.MainActor @preconcurrency public func cancelScan()
  @_Concurrency.MainActor @preconcurrency public func setUpCorners()
  @_Concurrency.MainActor @preconcurrency public func startCameraPreview()
  @_Concurrency.MainActor @preconcurrency public func setupOnViewDidLoad(regionOfInterestLabel: UIKit.UILabel, blurView: FawryPaySDK.BlurView, previewView: FawryPaySDK.PreviewView, cornerView: FawryPaySDK.CornerView, debugImageView: UIKit.UIImageView?)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open var shouldAutorotate: Swift.Bool {
    @objc get
  }
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open var supportedInterfaceOrientations: UIKit.UIInterfaceOrientationMask {
    @objc get
  }
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open var preferredStatusBarStyle: UIKit.UIStatusBarStyle {
    @objc get
  }
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open func viewWillAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open func viewDidLayoutSubviews()
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open func viewWillDisappear(_ animated: Swift.Bool)
  @_Concurrency.MainActor @preconcurrency public func getScanStats() -> FawryPaySDK.ScanStats
  @_Concurrency.MainActor @preconcurrency @objc public func captureOutput(_ output: AVFoundation.AVCaptureOutput, didOutput sampleBuffer: CoreMedia.CMSampleBuffer, from connection: AVFoundation.AVCaptureConnection)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
public struct CallBacks<T> {
  public var onStartBlock: (FawryPaySDK.FawryError?) -> Swift.Void
  public var onErrorBlock: (FawryPaySDK.FawryError?) -> Swift.Void
  public var onCompleteBlock: (T?) -> Swift.Void
  public init(onStartBlock: @escaping (FawryPaySDK.FawryError?) -> Swift.Void, onErrorBlock: @escaping (FawryPaySDK.FawryError?) -> Swift.Void, onCompleteBlock: @escaping (T?) -> Swift.Void)
}
public enum NetworkError : Swift.Error, Swift.CustomStringConvertible, Swift.Codable {
  case Unknown
  case NotConnectedToInternet
  case InternationalRoamingOff
  case NotReachedServer
  case ConnectionLost
  case IncorrectDataReturned
  public var description: Swift.String {
    get
  }
  public static func == (a: FawryPaySDK.NetworkError, b: FawryPaySDK.NetworkError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public func encode(to encoder: any Swift.Encoder) throws
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
@objc @_inheritsConvenienceInitializers public class CreditCardManager : ObjectiveC.NSObject {
  public func CreditCardManagerLauncher(onGetMerchantInfoCallBack: FawryPaySDK.CallBacks<FawryPaySDK.MerchantModel>?, onGetSavedCardsCallBack: FawryPaySDK.CallBacks<[FawryPaySDK.SavedCard]>?, onGetSavedYellowCardsCallBack: FawryPaySDK.CallBacks<[FawryPaySDK.SavedCard]>?, onFiltredInstallmentPlansCallBack: FawryPaySDK.CallBacks<[FawryPaySDK.InstallmentPlansData]>?, onUpdateCardHolderNameCallBack: FawryPaySDK.CallBacks<FawryPaySDK.CardDetails>?, onSavedCardCallBack: FawryPaySDK.CallBacks<FawryPaySDK.CardDetails>?, deleteSavedCardCallBack: FawryPaySDK.CallBacks<FawryPaySDK.FawrySDKStatusCode>?, onPayUsingCreditCardDetailsCallBack: FawryPaySDK.CallBacks<FawryPaySDK.PaymentChargeResponse>?, onPayUsingYellowCardDetailsCallBack: FawryPaySDK.CallBacks<FawryPaySDK.PaymentChargeResponse>?, onPayUsingCardTokenCallBack: FawryPaySDK.CallBacks<FawryPaySDK.PaymentChargeResponse>?, onPayUsingYellowCardTokenCallBack: FawryPaySDK.CallBacks<FawryPaySDK.PaymentChargeResponse>?, viewController: UIKit.UIViewController?)
  public func getSavedYellowCardsList(callBacks: FawryPaySDK.CallBacks<[FawryPaySDK.SavedCard]>)
  public func getMerchantInfoStep1()
  public func getSavedCardsStep2()
  public func getSavedYellowCardsStep2_2()
  public func getFiltredInstallmentPlansStep3(with cardNumber: Swift.String, isFullPayment: Swift.Bool = false)
  public func updateCardHolderNameStep4(with updateCardHolderNameModel: FawryPaySDK.CardHolderNameModel)
  public func addNewCardStep5(with card: FawryPaySDK.CardDetailsModel)
  public func deleteSavedCardStep5_5(with card: FawryPaySDK.SavedCard)
  public func payUsingCreditCardDetailsStep6(with card: FawryPaySDK.SavedCard, installmentPlanId: Swift.Int, selectedPlan: FawryPaySDK.InstallmentPlansData?, validateVoucherRequestParams: FawryPaySDK.FPValidateVoucherRequestParams? = nil, appliedLoyalty: FawryPaySDK.RedeemedLoyaltyModel? = nil)
  public func payUsingYellowCardDetailsStep6_6(with card: FawryPaySDK.SavedCard, installmentPlanId: Swift.Int, selectedPlan: FawryPaySDK.InstallmentPlansData?, validateVoucherRequestParams: FawryPaySDK.FPValidateVoucherRequestParams? = nil, appliedLoyalty: FawryPaySDK.RedeemedLoyaltyModel? = nil)
  public func payUsingCardTokenStep7(with card: FawryPaySDK.SavedCard, installmentPlanId: Swift.Int, cvv: Swift.String, selectedPlan: FawryPaySDK.InstallmentPlansData?, validateVoucherRequestParams: FawryPaySDK.FPValidateVoucherRequestParams? = nil, appliedLoyalty: FawryPaySDK.RedeemedLoyaltyModel? = nil)
  public func payUsingYellowCardTokenStep7_7(with card: FawryPaySDK.SavedCard, installmentPlanId: Swift.Int, cvv: Swift.String, selectedPlan: FawryPaySDK.InstallmentPlansData?, validateVoucherRequestParams: FawryPaySDK.FPValidateVoucherRequestParams? = nil, appliedLoyalty: FawryPaySDK.RedeemedLoyaltyModel? = nil)
  @objc override dynamic public init()
  @objc deinit
}
@objc public protocol RowViewModel {
  @objc func cellIdentifier() -> Swift.String
}
public protocol ViewModelPressible {
  func cellPressed()
}
@objc @_inheritsConvenienceInitializers public class ValuManager : ObjectiveC.NSObject {
  public func valuManagerLauncher(onGetCustomerStatusCallBacks: FawryPaySDK.CallBacks<Swift.Bool>, onValuInstallmentPlansCallBacks: FawryPaySDK.CallBacks<[FawryPaySDK.TenureItem]>, onValuInstallmentPlansSeamlessCallBacks: FawryPaySDK.CallBacks<FawryPaySDK.GetValuInstallmentPlansResponse>, onUpdateSelectedPlanCallBacks: FawryPaySDK.CallBacks<Swift.Bool>, onVerifyCustomerCallBacks: FawryPaySDK.CallBacks<Swift.Bool>, onVerifyCustomerSeamlessCallBacks: FawryPaySDK.CallBacks<FawryPaySDK.ValuCustomerVerificationResponse>, onValidOTPCallBacks: FawryPaySDK.CallBacks<Swift.Bool>, onValidOTPSeamlessCallBacks: FawryPaySDK.CallBacks<FawryPaySDK.ValuValidateOTPResponse>, onPayUsingValuCallBacks: FawryPaySDK.CallBacks<FawryPaySDK.PaymentChargeResponse>)
  public func getCustomerStatus(valuCustomerNumber: Swift.String, callBacks: FawryPaySDK.CallBacks<Swift.Bool>)
  public func getValuInstallmentPlans(valuCustomerNumber: Swift.String, filterCriteria: FawryPaySDK.FilterCriteria, validateVoucherRequestParams: FawryPaySDK.FPValidateVoucherRequestParams? = nil, callBacks: FawryPaySDK.CallBacks<[FawryPaySDK.TenureItem]>)
  public func getValuInstallmentPlansSeamless(valuCustomerNumber: Swift.String, filterCriteria: FawryPaySDK.FilterCriteria, validateVoucherRequestParams: FawryPaySDK.FPValidateVoucherRequestParams? = nil, callBacks: FawryPaySDK.CallBacks<FawryPaySDK.GetValuInstallmentPlansResponse>)
  public func updateWithSelectedPlan(selectedPlan: FawryPaySDK.TenureItem, callBacks: FawryPaySDK.CallBacks<Swift.Bool>)
  public func verifyCustomer(resendOTP: Swift.Bool = false, callBacks: FawryPaySDK.CallBacks<Swift.Bool>) -> Swift.String
  public func verifyCustomerSeamless(resendOTP: Swift.Bool = false, callBacks: FawryPaySDK.CallBacks<FawryPaySDK.ValuCustomerVerificationResponse>) -> Swift.String
  public func validateOTP(otpString: Swift.String, callBacks: FawryPaySDK.CallBacks<Swift.Bool>) -> Swift.String
  public func validateOTPSeamless(otpString: Swift.String, callBacks: FawryPaySDK.CallBacks<FawryPaySDK.ValuValidateOTPResponse>) -> Swift.String
  public func payUsingValu(otpString: Swift.String, validateVoucherRequestParams: FawryPaySDK.FPValidateVoucherRequestParams? = nil, callBacks: FawryPaySDK.CallBacks<FawryPaySDK.PaymentChargeResponse>) -> Swift.String
  public func getCustomerStatusStep1(valuCustomerNumber: Swift.String)
  public func getValuInstallmentPlansStep2(valuCustomerNumber: Swift.String, validateVoucherRequestParams: FawryPaySDK.FPValidateVoucherRequestParams? = nil, filterCriteria: FawryPaySDK.FilterCriteria)
  public func updateSelectedPlanStep3(selectedPlan: FawryPaySDK.TenureItem)
  public func verifyCustomerStep4(resendOTP: Swift.Bool = false) -> Swift.String
  public func validOTPStep5(otpString: Swift.String) -> Swift.String
  public func payUsingValuStep6(otpString: Swift.String, validateVoucherRequestParams: FawryPaySDK.FPValidateVoucherRequestParams? = nil) -> Swift.String
  @objc override dynamic public init()
  @objc deinit
}
public class ChargeItemsParamsModel : Swift.Codable {
  public var variantCode: Swift.String?
  public var reservationCodes: [Swift.String]?
  public init(itemId: Swift.String, charge_description: Swift.String? = nil, price: Swift.Double, quantity: Swift.Int)
  public init(itemId: Swift.String, charge_description: Swift.String? = nil, price: Swift.Double, quantity: Swift.Int, account: [FawryPaySDK.Accounts]? = nil)
  public init(itemId: Swift.String, charge_description: Swift.String? = nil, price: Swift.Double, quantity: Swift.Int, variantCode: Swift.String, reservationCodes: [Swift.String])
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
public class Accounts : Swift.Codable {
  public init(accountCode: Swift.String?, amount: Swift.Double?)
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@objc @_hasMissingDesignatedInitializers public class ChargePaymentParamsModel : ObjectiveC.NSObject, Swift.Codable {
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
public struct ForsaInstallmentPlanModel : Swift.Codable {
  public var id: Swift.Int?
  public var title: Swift.String?
  public var titleEn: Swift.String?
  public var titleAr: Swift.String?
  public var interestRate: Swift.Double?
  public var interestType: Swift.String?
  public var months: Swift.Int?
  public var earlySettlementFees: Swift.Double?
  public var adminFees: FawryPaySDK.AdminFees?
  public var catID: Swift.Int?
  public var brandID: Swift.Int?
  public var calcAdminFees: Swift.Double?
  public var calcInterestRate: Swift.Double?
  public var totalInterest: Swift.Double?
  public var totalOrderAmountWithInterest: Swift.Double?
  public var monthAmount: Swift.Double?
  public enum CodingKeys : Swift.String, Swift.CodingKey {
    case id, title
    case titleEn
    case titleAr
    case interestRate
    case interestType
    case months
    case earlySettlementFees
    case adminFees
    case catID
    case brandID
    case calcAdminFees, calcInterestRate, totalInterest, totalOrderAmountWithInterest, monthAmount
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias RawValue = Swift.String
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public init(id: Swift.Int?, title: Swift.String?, titleEn: Swift.String?, titleAr: Swift.String?, interestRate: Swift.Double?, interestType: Swift.String?, months: Swift.Int?, earlySettlementFees: Swift.Double?, adminFees: FawryPaySDK.AdminFees?, catID: Swift.Int?, brandID: Swift.Int?, calcAdminFees: Swift.Double?, calcInterestRate: Swift.Double?, totalInterest: Swift.Double?, totalOrderAmountWithInterest: Swift.Double?, monthAmount: Swift.Double?)
  public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
}
@objc public class ValuValidateOTPResponse : ObjectiveC.NSObject, Swift.Codable {
  final public let responseCode: Swift.String?
  final public let responseDesc: Swift.String?
  final public let oTPisValid: Swift.Bool?
  required public init(from decoder: any Swift.Decoder) throws
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
}
@objc @_hasMissingDesignatedInitializers public class ValuBillDataModel : ObjectiveC.NSObject, Swift.Codable {
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
public class LaunchCheckoutModel : Swift.Codable {
  public init(scheme: Swift.String?)
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@objc public protocol OTPFieldViewDelegate {
  @objc func shouldBecomeFirstResponderForOTP(otpTextFieldIndex index: Swift.Int) -> Swift.Bool
  @objc func enteredOTP(otp: Swift.String)
  @objc func hasEnteredAllOTP(hasEnteredAll: Swift.Bool) -> Swift.Bool
}
@objc public enum DisplayType : Swift.Int {
  case circular
  case roundedCorner
  case square
  case diamond
  case underlinedBottom
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public enum KeyboardType : Swift.Int {
  case numeric
  case alphabet
  case alphaNumeric
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@_inheritsConvenienceInitializers @objc @_Concurrency.MainActor @preconcurrency public class OTPFieldView : UIKit.UIView {
  @_Concurrency.MainActor @preconcurrency public var displayType: FawryPaySDK.DisplayType
  @_Concurrency.MainActor @preconcurrency public var fieldsCount: Swift.Int
  @_Concurrency.MainActor @preconcurrency public var otpInputType: FawryPaySDK.KeyboardType
  @_Concurrency.MainActor @preconcurrency public var fieldFont: UIKit.UIFont
  @_Concurrency.MainActor @preconcurrency public var secureEntry: Swift.Bool
  @_Concurrency.MainActor @preconcurrency public var hideEnteredText: Swift.Bool
  @_Concurrency.MainActor @preconcurrency public var requireCursor: Swift.Bool
  @_Concurrency.MainActor @preconcurrency public var cursorColor: UIKit.UIColor
  @_Concurrency.MainActor @preconcurrency public var fieldSize: CoreFoundation.CGFloat
  @_Concurrency.MainActor @preconcurrency public var separatorSpace: CoreFoundation.CGFloat
  @_Concurrency.MainActor @preconcurrency public var fieldBorderWidth: CoreFoundation.CGFloat
  @_Concurrency.MainActor @preconcurrency public var shouldAllowIntermediateEditing: Swift.Bool
  @_Concurrency.MainActor @preconcurrency public var defaultBackgroundColor: UIKit.UIColor
  @_Concurrency.MainActor @preconcurrency public var filledBackgroundColor: UIKit.UIColor
  @_Concurrency.MainActor @preconcurrency public var defaultBorderColor: UIKit.UIColor
  @_Concurrency.MainActor @preconcurrency public var filledBorderColor: UIKit.UIColor
  @_Concurrency.MainActor @preconcurrency public var errorBorderColor: UIKit.UIColor?
  @_Concurrency.MainActor @preconcurrency weak public var delegate: (any FawryPaySDK.OTPFieldViewDelegate)?
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func awakeFromNib()
  @_Concurrency.MainActor @preconcurrency public func initializeUI()
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
extension FawryPaySDK.OTPFieldView : UIKit.UITextFieldDelegate {
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func textFieldShouldBeginEditing(_ textField: UIKit.UITextField) -> Swift.Bool
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func textField(_ textField: UIKit.UITextField, shouldChangeCharactersIn range: Foundation.NSRange, replacementString string: Swift.String) -> Swift.Bool
}
@_inheritsConvenienceInitializers public class RadioButtonContainer : FawryPaySDK.RadioCheckboxBaseContainer<FawryPaySDK.RadioButton> {
  weak public var delegate: (any FawryPaySDK.RadioButtonDelegate)? {
    get
    set
  }
  public var selectedButton: FawryPaySDK.RadioButtonContainer.Kind? {
    get
    set
  }
  @discardableResult
  override public func addButton(_ button: FawryPaySDK.RadioButtonContainer.Kind) -> Swift.Bool
  public var radioButtonColor: FawryPaySDK.RadioButtonColor? {
    get
    set
  }
  public var radioCircleStyle: FawryPaySDK.RadioButtonCircleStyle? {
    get
    set
  }
  public func setEachRadioButtonColor(_ body: (FawryPaySDK.RadioButtonContainer.Kind) -> FawryPaySDK.RadioButtonColor)
  public func setEachRadioButtonCircleStyle(_ body: (FawryPaySDK.RadioButtonContainer.Kind) -> FawryPaySDK.RadioButtonCircleStyle)
  override public init(_ buttons: [FawryPaySDK.RadioButton] = super)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @IBDesignable @_Concurrency.MainActor @preconcurrency public class DesignableView : UIKit.UIView {
  @objc @IBInspectable @_Concurrency.MainActor @preconcurrency public var cornerRadius: CoreFoundation.CGFloat {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor @preconcurrency public var borderWidth: CoreFoundation.CGFloat {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor @preconcurrency public var borderColor: UIKit.UIColor? {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor @preconcurrency public var shadowRadius: CoreFoundation.CGFloat {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor @preconcurrency public var shadowOpacity: Swift.Float {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor @preconcurrency public var shadowOffset: CoreFoundation.CGSize {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor @preconcurrency public var shadowColor: UIKit.UIColor? {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@_hasMissingDesignatedInitializers public class AnonymousFrameWorkHelper {
  public class var sharedInstance: FawryPaySDK.AnonymousFrameWorkHelper! {
    get
  }
  public var amanManager: FawryPaySDK.AmanManager?
  public var loyaltyManager: FawryPaySDK.LoyaltyManager?
  public var valuManager: FawryPaySDK.ValuManager?
  public var souhoolaManager: FawryPaySDK.SouhoolaManager?
  public var forsaManager: FawryPaySDK.ForsaManager?
  public var eWalletManager: FawryPaySDK.E_WalletManager?
  public var creditCardManager: FawryPaySDK.CreditCardManager?
  public var fawryPayByRefManager: FawryPaySDK.FawryPayByRefManager?
  public func launchAnonymousSDK(on baseController: UIKit.UIViewController, isAnimating: Swift.Bool = true, customViewNib: Swift.String? = nil, customViewController: UIKit.UIViewController? = nil, launchModel: FawryPaySDK.FawryLaunchModel? = nil, baseURL: Swift.String? = nil, appLanguage: Swift.String? = nil, currency: Swift.String? = Currency.egp, enable3Ds: Swift.Bool = false, authCaptureModePayment: Swift.Bool = false, cairoBold: UIKit.UIFont? = nil, cairoSemiBold: UIKit.UIFont? = nil, cairoRegular: UIKit.UIFont? = nil, fawryProBold: UIKit.UIFont? = nil, completionBlock: @escaping FawryPaySDK.onCompletion, onPreCompletionHandler: @escaping FawryPaySDK.onPreCompletion, errorBlock: @escaping FawryPaySDK.onErrorHandler, onPaymentCompletedHandler: @escaping FawryPaySDK.onPaymentCompletedHandler, onSuccessHandler: @escaping FawryPaySDK.onSuccessHandler)
  public func launchAnonymousValuSDK(on baseController: UIKit.UIViewController, isAnimating: Swift.Bool = true, customViewNib: Swift.String? = nil, customViewController: UIKit.UIViewController? = nil, launchModel: FawryPaySDK.FawryLaunchModel? = nil, baseURL: Swift.String? = nil, appLanguage: Swift.String? = nil, currency: Swift.String? = Currency.egp, enable3Ds: Swift.Bool = false, authCaptureModePayment: Swift.Bool = false, cairoBold: UIKit.UIFont? = nil, cairoSemiBold: UIKit.UIFont? = nil, cairoRegular: UIKit.UIFont? = nil, fawryProBold: UIKit.UIFont? = nil, completionBlock: @escaping FawryPaySDK.onCompletion, onPreCompletionHandler: @escaping FawryPaySDK.onPreCompletion, errorBlock: @escaping FawryPaySDK.onErrorHandler, onPaymentCompletedHandler: @escaping FawryPaySDK.onPaymentCompletedHandler, onSuccessHandler: @escaping FawryPaySDK.onSuccessHandler)
  public func launchAnonymousAmanSDK(on baseController: UIKit.UIViewController, isAnimating: Swift.Bool = true, customViewNib: Swift.String? = nil, customViewController: UIKit.UIViewController? = nil, launchModel: FawryPaySDK.FawryLaunchModel? = nil, baseURL: Swift.String? = nil, appLanguage: Swift.String? = nil, currency: Swift.String? = Currency.egp, enable3Ds: Swift.Bool = false, authCaptureModePayment: Swift.Bool = false, cairoBold: UIKit.UIFont? = nil, cairoSemiBold: UIKit.UIFont? = nil, cairoRegular: UIKit.UIFont? = nil, fawryProBold: UIKit.UIFont? = nil, completionBlock: @escaping FawryPaySDK.onCompletion, onPreCompletionHandler: @escaping FawryPaySDK.onPreCompletion, errorBlock: @escaping FawryPaySDK.onErrorHandler, onPaymentCompletedHandler: @escaping FawryPaySDK.onPaymentCompletedHandler, onSuccessHandler: @escaping FawryPaySDK.onSuccessHandler)
  public func launchAnonymousForsaSDK(on baseController: UIKit.UIViewController, isAnimating: Swift.Bool = true, customViewNib: Swift.String? = nil, customViewController: UIKit.UIViewController? = nil, launchModel: FawryPaySDK.FawryLaunchModel? = nil, baseURL: Swift.String? = nil, appLanguage: Swift.String? = nil, currency: Swift.String? = Currency.egp, enable3Ds: Swift.Bool = false, authCaptureModePayment: Swift.Bool = false, cairoBold: UIKit.UIFont? = nil, cairoSemiBold: UIKit.UIFont? = nil, cairoRegular: UIKit.UIFont? = nil, fawryProBold: UIKit.UIFont? = nil, completionBlock: @escaping FawryPaySDK.onCompletion, onPreCompletionHandler: @escaping FawryPaySDK.onPreCompletion, errorBlock: @escaping FawryPaySDK.onErrorHandler, onPaymentCompletedHandler: @escaping FawryPaySDK.onPaymentCompletedHandler, onSuccessHandler: @escaping FawryPaySDK.onSuccessHandler)
  public func launchAnonymousEWalletSDK(on baseController: UIKit.UIViewController, isAnimating: Swift.Bool = true, customViewNib: Swift.String? = nil, customViewController: UIKit.UIViewController? = nil, launchModel: FawryPaySDK.FawryLaunchModel? = nil, baseURL: Swift.String? = nil, appLanguage: Swift.String? = nil, currency: Swift.String? = Currency.egp, enable3Ds: Swift.Bool = false, authCaptureModePayment: Swift.Bool = false, cairoBold: UIKit.UIFont? = nil, cairoSemiBold: UIKit.UIFont? = nil, cairoRegular: UIKit.UIFont? = nil, fawryProBold: UIKit.UIFont? = nil, completionBlock: @escaping FawryPaySDK.onCompletion, onPreCompletionHandler: @escaping FawryPaySDK.onPreCompletion, errorBlock: @escaping FawryPaySDK.onErrorHandler, onPaymentCompletedHandler: @escaping FawryPaySDK.onPaymentCompletedHandler, onSuccessHandler: @escaping FawryPaySDK.onSuccessHandler)
  public func launchAnonymousSouhoolaSDK(on baseController: UIKit.UIViewController, isAnimating: Swift.Bool = true, customViewNib: Swift.String? = nil, customViewController: UIKit.UIViewController? = nil, launchModel: FawryPaySDK.FawryLaunchModel? = nil, baseURL: Swift.String? = nil, appLanguage: Swift.String? = nil, currency: Swift.String? = Currency.egp, enable3Ds: Swift.Bool = false, authCaptureModePayment: Swift.Bool = false, cairoBold: UIKit.UIFont? = nil, cairoSemiBold: UIKit.UIFont? = nil, cairoRegular: UIKit.UIFont? = nil, fawryProBold: UIKit.UIFont? = nil, completionBlock: @escaping FawryPaySDK.onCompletion, onPreCompletionHandler: @escaping FawryPaySDK.onPreCompletion, errorBlock: @escaping FawryPaySDK.onErrorHandler, onPaymentCompletedHandler: @escaping FawryPaySDK.onPaymentCompletedHandler, onSuccessHandler: @escaping FawryPaySDK.onSuccessHandler)
  public func launchAnonymousCreditCardSDK(on baseController: UIKit.UIViewController, isAnimating: Swift.Bool = true, customViewNib: Swift.String? = nil, customViewController: UIKit.UIViewController? = nil, launchModel: FawryPaySDK.FawryLaunchModel? = nil, baseURL: Swift.String? = nil, appLanguage: Swift.String? = nil, currency: Swift.String? = Currency.egp, enable3Ds: Swift.Bool = false, authCaptureModePayment: Swift.Bool = false, cairoBold: UIKit.UIFont? = nil, cairoSemiBold: UIKit.UIFont? = nil, cairoRegular: UIKit.UIFont? = nil, fawryProBold: UIKit.UIFont? = nil, completionBlock: @escaping FawryPaySDK.onCompletion, onPreCompletionHandler: @escaping FawryPaySDK.onPreCompletion, errorBlock: @escaping FawryPaySDK.onErrorHandler, onPaymentCompletedHandler: @escaping FawryPaySDK.onPaymentCompletedHandler, onSuccessHandler: @escaping FawryPaySDK.onSuccessHandler)
  public func llaunchAnonymousInstallmentSDK(on baseController: UIKit.UIViewController, isAnimating: Swift.Bool = true, customViewNib: Swift.String? = nil, customViewController: UIKit.UIViewController? = nil, launchModel: FawryPaySDK.FawryLaunchModel? = nil, baseURL: Swift.String? = nil, appLanguage: Swift.String? = nil, currency: Swift.String? = Currency.egp, enable3Ds: Swift.Bool = false, authCaptureModePayment: Swift.Bool = false, cairoBold: UIKit.UIFont? = nil, cairoSemiBold: UIKit.UIFont? = nil, cairoRegular: UIKit.UIFont? = nil, fawryProBold: UIKit.UIFont? = nil, completionBlock: @escaping FawryPaySDK.onCompletion, onPreCompletionHandler: @escaping FawryPaySDK.onPreCompletion, errorBlock: @escaping FawryPaySDK.onErrorHandler, onPaymentCompletedHandler: @escaping FawryPaySDK.onPaymentCompletedHandler, onSuccessHandler: @escaping FawryPaySDK.onSuccessHandler)
  public func launchAnonymousYellowCardSDK(on baseController: UIKit.UIViewController, isAnimating: Swift.Bool = true, customViewNib: Swift.String? = nil, customViewController: UIKit.UIViewController? = nil, launchModel: FawryPaySDK.FawryLaunchModel? = nil, baseURL: Swift.String? = nil, appLanguage: Swift.String? = nil, currency: Swift.String? = Currency.egp, enable3Ds: Swift.Bool = false, authCaptureModePayment: Swift.Bool = false, cairoBold: UIKit.UIFont? = nil, cairoSemiBold: UIKit.UIFont? = nil, cairoRegular: UIKit.UIFont? = nil, fawryProBold: UIKit.UIFont? = nil, completionBlock: @escaping FawryPaySDK.onCompletion, onPreCompletionHandler: @escaping FawryPaySDK.onPreCompletion, errorBlock: @escaping FawryPaySDK.onErrorHandler, onPaymentCompletedHandler: @escaping FawryPaySDK.onPaymentCompletedHandler, onSuccessHandler: @escaping FawryPaySDK.onSuccessHandler)
  public func launchCardTokenizerSDK(on baseController: UIKit.UIViewController, launchModel: FawryPaySDK.FawryLaunchModel? = nil, baseURL: Swift.String? = nil, appLanguage: Swift.String? = nil, currency: Swift.String? = Currency.egp, enable3Ds: Swift.Bool = false, errorBlock: @escaping FawryPaySDK.onErrorHandler, onAddedNewCard: @escaping FawryPaySDK.AddCardViewController.onAddNewCard, dismissBlock: @escaping FawryPaySDK.AddCardViewController.onDismiss)
  public func launchCardManagerSDK(on baseController: UIKit.UIViewController, launchModel: FawryPaySDK.FawryLaunchModel? = nil, baseURL: Swift.String? = nil, appLanguage: Swift.String? = nil, currency: Swift.String? = Currency.egp, cairoBold: UIKit.UIFont? = nil, cairoSemiBold: UIKit.UIFont? = nil, cairoRegular: UIKit.UIFont? = nil, fawryProBold: UIKit.UIFont? = nil, enable3Ds: Swift.Bool = false, errorBlock: @escaping FawryPaySDK.onErrorHandler, onAddedNewCard: @escaping FawryPaySDK.onSuccessHandler, dismissBlock: @escaping FawryPaySDK.onDismissHandler)
  public func launchBNBLSeamlessFlows(on baseController: UIKit.UIViewController, isAnimating: Swift.Bool = true, customViewNib: Swift.String? = nil, customViewController: UIKit.UIViewController? = nil, launchModel: FawryPaySDK.FawryLaunchModel? = nil, baseURL: Swift.String? = nil, appLanguage: Swift.String? = nil, currency: Swift.String? = Currency.egp, enable3Ds: Swift.Bool = false, completionBlock: @escaping FawryPaySDK.onCompletion, onPreCompletionHandler: @escaping FawryPaySDK.onPreCompletion, errorBlock: @escaping FawryPaySDK.onErrorHandler, onPaymentCompletedHandler: @escaping FawryPaySDK.onPaymentCompletedHandler, onSuccessHandler: @escaping FawryPaySDK.onSuccessHandler)
  public func launchAnonymousApplePaySDK(on baseController: UIKit.UIViewController, isAnimating: Swift.Bool = true, customViewNib: Swift.String? = nil, customViewController: UIKit.UIViewController? = nil, launchModel: FawryPaySDK.FawryLaunchModel? = nil, baseURL: Swift.String? = nil, appLanguage: Swift.String? = nil, currency: Swift.String? = Currency.egp, enable3Ds: Swift.Bool = false, authCaptureModePayment: Swift.Bool = false, cairoBold: UIKit.UIFont? = nil, cairoSemiBold: UIKit.UIFont? = nil, cairoRegular: UIKit.UIFont? = nil, fawryProBold: UIKit.UIFont? = nil, completionBlock: @escaping FawryPaySDK.onCompletion, onPreCompletionHandler: @escaping FawryPaySDK.onPreCompletion, errorBlock: @escaping FawryPaySDK.onErrorHandler, onPaymentCompletedHandler: @escaping FawryPaySDK.onPaymentCompletedHandler, onSuccessHandler: @escaping FawryPaySDK.onSuccessHandler)
  public func launchAnonymousLoyaltySDK(on baseController: UIKit.UIViewController, isAnimating: Swift.Bool = true, customViewNib: Swift.String? = nil, customViewController: UIKit.UIViewController? = nil, launchModel: FawryPaySDK.FawryLaunchModel? = nil, baseURL: Swift.String? = nil, appLanguage: Swift.String? = nil, currency: Swift.String? = Currency.egp, enable3Ds: Swift.Bool = false, authCaptureModePayment: Swift.Bool = false, cairoBold: UIKit.UIFont? = nil, cairoSemiBold: UIKit.UIFont? = nil, cairoRegular: UIKit.UIFont? = nil, fawryProBold: UIKit.UIFont? = nil, completionBlock: @escaping FawryPaySDK.onCompletion, onPreCompletionHandler: @escaping FawryPaySDK.onPreCompletion, errorBlock: @escaping FawryPaySDK.onErrorHandler, onPaymentCompletedHandler: @escaping FawryPaySDK.onPaymentCompletedHandler, onSuccessHandler: @escaping FawryPaySDK.onSuccessHandler)
  @objc deinit
}
extension FawryPaySDK.AnonymousFrameWorkHelper {
  public func getMerchantReferenceNumber() -> Swift.String
  public func getMerchantInfo(baseURL: Swift.String? = nil, appLanguage: Swift.String? = nil, merchant: FawryPaySDK.LaunchMerchantModel, orderRefNum: Swift.String, errorBlock: @escaping FawryPaySDK.onErrorHandler, onSuccessHandler: @escaping FawryPaySDK.onSuccessHandler)
  public func checkPaymentStatus(baseURL: Swift.String? = nil, appLanguage: Swift.String? = nil, merchant: FawryPaySDK.LaunchMerchantModel, orderRefNum: Swift.String, errorBlock: @escaping FawryPaySDK.onErrorHandler, onSuccessHandler: @escaping FawryPaySDK.onSuccessHandler)
  public func handleCheckoutURL(url: Foundation.URL)
}
@objc public class GetSouhoolaInstallmentPlansResponse : ObjectiveC.NSObject, Swift.Codable {
  final public let fawryReferenceNumber: Swift.String?
  final public let installmentPlans: [FawryPaySDK.TenureInstallmentPlans]?
  required public init(from decoder: any Swift.Decoder) throws
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
}
public protocol ScanEvents {
  mutating func onNumberRecognized(number: Swift.String, expiry: FawryPaySDK.Expiry?, cardImage: CoreGraphics.CGImage, numberBoundingBox: CoreFoundation.CGRect, expiryBoundingBox: CoreFoundation.CGRect?)
  mutating func onScanComplete(scanStats: FawryPaySDK.ScanStats)
}
public enum AddressErrorMessages : Swift.String {
  case lcoationNotFetched
  case emptyGovernorate
  case emptyCity
  case emptyArea
  case emptyStreet
  case emptyBuilding
  case emptyFloor
  case emptyApartment
  case emptyLandmark
  case emptyFullName
  case emptyMobileNumber
  case emptyAddressType
  case emptyCourier
  case emptyDeliveryType
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
extension UIKit.UITableViewCell {
  @_Concurrency.MainActor @preconcurrency public static func cellIdentifier() -> Swift.String
}
@objc public class FPValidateVoucherRequestParams : ObjectiveC.NSObject, Swift.Codable {
  public var language: Swift.String?
  public var coupon: Swift.String?
  public var partnerId: Swift.Double?
  public var purchaseItems: [FawryPaySDK.FPPurchaseItem]?
  public var purchaseAmount: Swift.Double?
  public init(language: Swift.String? = nil, coupon: Swift.String? = nil, partnerId: Swift.Double? = nil, purchaseItems: [FawryPaySDK.FPPurchaseItem]? = nil)
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
  @objc deinit
}
@objc public class FPPurchaseItem : ObjectiveC.NSObject, Swift.Codable {
  public var itemSKU: Swift.String?
  public var quantity: Swift.Int?
  public var lineAmount: Swift.Double?
  public init(itemSKU: Swift.String? = nil, quantity: Swift.Int? = nil, lineAmount: Swift.Double? = nil)
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
  @objc deinit
}
public class LaunchMerchantModel : Swift.Codable {
  public init(merchantCode: Swift.String?, merchantRefNum: Swift.String?, secureKey: Swift.String?)
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
public struct DetectedAllBoxes {
  public func toArray() -> [[Swift.String : Any]]
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor @preconcurrency public class CornerView : UIKit.UIView {
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor @preconcurrency public func setFrameSize(roi: UIKit.UIView)
  @_Concurrency.MainActor @preconcurrency public func drawCorners()
  @objc deinit
}
public struct RadioButtonColor {
  public init(active: UIKit.UIColor, inactive: UIKit.UIColor)
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor @preconcurrency open class BaseComponentViewController : FawryPaySDK.BaseViewController {
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func viewDidLoad()
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func touchesEnded(_ touches: Swift.Set<UIKit.UITouch>, with event: UIKit.UIEvent?)
  @objc @IBAction @_Concurrency.MainActor @preconcurrency public func crossTapped(_ sender: Any?)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@objc public class GetValuInstallmentPlansResponse : ObjectiveC.NSObject, Swift.Codable {
  final public let minimumDownPayment: Swift.Int?
  final public let mobileNumber: Swift.String?
  final public let orderId: Swift.String?
  final public let productList: [FawryPaySDK.ProductItem]?
  final public let responseCode: Swift.String?
  final public let responseDesc: Swift.String?
  required public init(from decoder: any Swift.Decoder) throws
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
}
public struct ReviewData : Swift.Codable {
  public let loanAmount: Swift.Double?
  public let noOfMonths: Swift.Int?
  public let installmentValue: Swift.Double?
  public let financedAmount: Swift.Double?
  public let tenureNumber: Swift.Int?
  public let installmentAmount: Swift.Double?
  public let downpayment: Swift.Double?
  public let adminFees: Swift.Double?
  public let firstInstallmentDate: Swift.String?
  public let lastInstallmentDate: Swift.String?
  public let interestAmount: Swift.Double?
  public init(loanAmount: Swift.Double?, noOfMonths: Swift.Int?, installmentValue: Swift.Double?, financedAmount: Swift.Double?, tenureNumber: Swift.Int?, installmentAmount: Swift.Double?, downpayment: Swift.Double?, adminFees: Swift.Double?, firstInstallmentDate: Swift.String?, lastInstallmentDate: Swift.String?, interestAmount: Swift.Double?)
  public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
}
@objc public class VoucherValidationResponse : ObjectiveC.NSObject, Swift.Codable {
  public var giftDescription: Swift.String?
  public var discountAmount: Swift.Double?
  public init(giftDescription: Swift.String? = nil, discountAmount: Swift.Double? = nil)
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@objc @_inheritsConvenienceInitializers public class VoucherManager : ObjectiveC.NSObject {
  public func VoucherManagerLauncher(onGetValidateVoucherRequestCallBacks: FawryPaySDK.CallBacks<FawryPaySDK.VoucherValidationResponse>?)
  public func getValidateVoucherRequest(couponCode: Swift.String, promoPartnerId: Swift.Double?, callBacks: FawryPaySDK.CallBacks<FawryPaySDK.VoucherValidationResponse>)
  public func getValidateVoucherRequest(couponCode: Swift.String, promoPartnerId: Swift.Double?)
  @objc override dynamic public init()
  @objc deinit
}
extension UIKit.UITableView {
  @_Concurrency.MainActor @preconcurrency public func captureFullTableViewContent(cellsIdentifiers: [Swift.String], footerAndHeaderIdentifires: [Swift.String]) -> UIKit.UIImage?
}
public class InstallmentPlansData : Swift.Codable {
  public init(id: Swift.Int? = 0, installmentPlan: FawryPaySDK.InstallmentPlans? = nil, applyTo: Swift.String? = nil, requiredItemsValidation: Swift.Bool? = nil)
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
public struct InstallmentPlans : Swift.Codable, Swift.Equatable {
  public init(id: Swift.Int? = 0, nameAr: Swift.String? = nil, nameEn: Swift.String? = nil, rate: Swift.Double? = nil, noOfMonths: Swift.Int? = nil, minAmount: Swift.Double? = nil, maxAmount: Swift.Double? = nil, startDate: Swift.Int64? = nil, endDate: Swift.Int64? = nil, type: Swift.String? = nil, accountType: FawryPaySDK.InstallmentAccountType? = nil, fixedFees: Swift.Double? = nil, upfrontFees: Swift.Double? = nil, perMonthInstallment: Swift.Double? = nil, calcUpfrontFees: Swift.Double? = nil, calcInterestAmount: Swift.Double? = nil)
  public static func == (a: FawryPaySDK.InstallmentPlans, b: FawryPaySDK.InstallmentPlans) -> Swift.Bool
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct InstallmentStatus : Swift.Codable, Swift.Equatable {
  public static func == (a: FawryPaySDK.InstallmentStatus, b: FawryPaySDK.InstallmentStatus) -> Swift.Bool
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct InstallmentAccountType : Swift.Codable, Swift.Equatable {
  public static func == (a: FawryPaySDK.InstallmentAccountType, b: FawryPaySDK.InstallmentAccountType) -> Swift.Bool
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct CardHolderNameModel : Swift.Codable {
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
extension Foundation.Date {
  public func toString(withFormat format: Swift.String = "EEE, dd MMM yyyy hh:mm a") -> Swift.String
}
@_hasMissingDesignatedInitializers public class PurchaseItemsParamsModel : Swift.Codable {
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
public class Ocr {
  public var scanStats: FawryPaySDK.ScanStats
  public var expiry: FawryPaySDK.Expiry?
  public var errorCorrectionDuration: Swift.Double
  public init()
  public func userCancelled()
  @available(iOS 11.2, *)
  public func performWithErrorCorrection(for rawImage: CoreGraphics.CGImage) -> (Swift.String?, FawryPaySDK.Expiry?, Swift.Bool, Swift.Bool)
  @available(iOS 11.2, *)
  public func perform(for rawImage: CoreGraphics.CGImage) -> Swift.String?
  @objc deinit
}
@objc public class ValuCustomerVerificationResponse : ObjectiveC.NSObject, Swift.Codable {
  public var mobileNumber: Swift.String?
  public var orderId: Swift.String?
  public var responseCode: Swift.String?
  public var responseDesc: Swift.String?
  required public init(from decoder: any Swift.Decoder) throws
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
}
public class Governorate : Swift.Codable {
  public init(code: Swift.String?, name: Swift.String?, namePrimaryLang: Swift.String?, nameSecondaryLang: Swift.String?, cities: [FawryPaySDK.City]? = nil)
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
public class City : Swift.Codable {
  public init(code: Swift.String? = nil, name: Swift.String? = nil, namePrimaryLang: Swift.String? = nil, nameSecondaryLang: Swift.String? = nil, area: [FawryPaySDK.Area]? = nil)
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
public class Area : Swift.Codable {
  public init(code: Swift.String? = nil, name: Swift.String? = nil, namePrimaryLang: Swift.String? = nil, nameSecondaryLang: Swift.String? = nil, street: [FawryPaySDK.Street]? = nil)
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
public class Street : Swift.Codable {
  public init(code: Swift.String? = nil, name: Swift.String? = nil, namePrimaryLang: Swift.String? = nil, nameSecondaryLang: Swift.String? = nil)
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@objc @_inheritsConvenienceInitializers public class AmanManager : ObjectiveC.NSObject {
  public func amanManagerLauncher(onGetAmanInstallmentPlansCallBacks: FawryPaySDK.CallBacks<FawryPaySDK.AmanPlansResponse>, onSendOTPCallBacks: FawryPaySDK.CallBacks<FawryPaySDK.AmanOtpResponse>, onPayUsingAmanCallBacks: FawryPaySDK.CallBacks<FawryPaySDK.PaymentChargeResponse>)
  public func getAmanInstallmentPlans(amanCustomerMobileNumber: Swift.String, callBacks: FawryPaySDK.CallBacks<FawryPaySDK.AmanPlansResponse>)
  public func payUsingAman(orderRefNumber: Swift.String, otpValue: Swift.String, amanMobile: Swift.String, amanInstallmentPlan: FawryPaySDK.AmanInstallmentPlan, callBacks: FawryPaySDK.CallBacks<FawryPaySDK.PaymentChargeResponse>)
  public func getAmanInstallmentPlansStep1(amanCustomerMobileNumber: Swift.String)
  public func amanSendOTPStep2(amanCustomerMobileNumber: Swift.String, orderRefNumber: Swift.String)
  public func payUsingAmanStep3(orderRefNumber: Swift.String, otpValue: Swift.String, amanCustomerMobileNumber: Swift.String, amanInstallmentPlan: FawryPaySDK.AmanInstallmentPlan)
  @objc override dynamic public init()
  @objc deinit
}
public struct SavedCard : Swift.Codable {
  public var creationDate: Swift.Int64?
  public var lastFourDigits: Swift.String?
  public var token: Swift.String?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers public class CardDetails : Swift.Codable {
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@objc public class ThemeStyleFawryPaySDK : ObjectiveC.NSObject {
  public var theme: UIKit.UIColor?
  public var lightBorder: UIKit.UIColor?
  public var darkBorder: UIKit.UIColor?
  public var shadow: UIKit.UIColor?
  public var darkBackground: UIKit.UIColor?
  public var lightBackground: UIKit.UIColor?
  public var intermidiateBackground: UIKit.UIColor?
  public var darkText: UIKit.UIColor?
  public var lightText: UIKit.UIColor?
  public var intermidiateText: UIKit.UIColor?
  public var affirmation: UIKit.UIColor?
  public var negation: UIKit.UIColor?
  public var selectedPlanBackground: UIKit.UIColor?
  public init(theme: UIKit.UIColor?, lightBorder: UIKit.UIColor?, darkBorder: UIKit.UIColor?, shadow: UIKit.UIColor?, darkBackground: UIKit.UIColor?, lightBackground: UIKit.UIColor?, intermidiateBackground: UIKit.UIColor?, darkText: UIKit.UIColor?, lightText: UIKit.UIColor?, intermidiateText: UIKit.UIColor?, affirmation: UIKit.UIColor?, negation: UIKit.UIColor?, selectedPlanBackground: UIKit.UIColor?)
  @objc deinit
}
public struct AdminFees : Swift.Codable {
  public var id: Swift.Int?
  public var value: Swift.Double?
  public var type: Swift.String?
  public init(id: Swift.Int?, value: Swift.Double?, type: Swift.String?)
  public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
}
public enum ErrorCode : Swift.Int {
  case success
  case unauthorized
  case responseCouldNotBeParsed
  case parametersMissing
  case internalServerError
  case noInternet
  case userCancelled
  case invalidRequest
  case validationFailed
  case failed
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public enum ErrorMessages : Swift.String {
  case responseCouldNotBeParsed
  case interNetNotAvailable
  case internalServerError
  case unauthorized
  case parametersMissing
  case userCancelled
  case invalidRequest
  case invalidBaseURL
  case invalidPreOrderInputs
  case invalidExternalPaymentMethodsInputs
  case invalidPaymentMethod
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
@objc public class FawryError : ObjectiveC.NSObject, Swift.Codable {
  public var errorCode: Swift.String?
  public var message: Swift.String?
  public var networkError: FawryPaySDK.NetworkError?
  public var errorStatusCode: Swift.String?
  public var usedBTC: Swift.Int?
  public var refNumber: Swift.String?
  public init(errorCode: Swift.String?, message: Swift.String?, networkError: FawryPaySDK.NetworkError?, errorStatusCode: Swift.String?, usedBTC: Swift.Int? = .none, refNumber: Swift.String? = .none)
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
public enum CustomFawryPayError : Swift.Error, Swift.Decodable {
  case noInternet(message: Swift.String)
  case other(error: FawryPaySDK.FawryError)
  public init(from decoder: any Swift.Decoder) throws
}
public struct AppLanguage {
  public static let English: Swift.String
  public static let Arabic: Swift.String
}
public struct Currency {
  public static let egp: Swift.String
}
public enum Payment_Method : Swift.String, Swift.Codable {
  case all
  case payAtFawry
  case card
  case wallet
  case yellowCard
  case applePay
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum PaymentMethod : Swift.String, Swift.Codable {
  case payAtFawry
  case card
  case mWallet
  case valu
  case installment
  case selectedCard
  case loyalty
  case cashOnDelivery
  case cashAccount
  case creditCard
  case yellowCard
  case forsa
  case souhoola
  case aman
  case myFawry
  case applePay
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum WalletPaymentMethods : Swift.String, Swift.Codable {
  case scanQR
  case notification
  case none
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum PaymentURLs : Swift.String, Swift.Codable {
  case return3DURL
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public struct ReviewTransactionResponse : Swift.Codable {
  public let isSuccess: Swift.Bool?
  public let errors: FawryPaySDK.ErrorResponse?
  public let data: FawryPaySDK.ReviewData?
  public let orderPriceDetails: FawryPaySDK.OrderPriceDetails?
  public let success: Swift.Bool?
  public let error: FawryPaySDK.ErrorResponse?
  public init(isSuccess: Swift.Bool?, errors: FawryPaySDK.ErrorResponse?, data: FawryPaySDK.ReviewData?, orderPriceDetails: FawryPaySDK.OrderPriceDetails?, success: Swift.Bool?, error: FawryPaySDK.ErrorResponse?)
  public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
}
public class AmanInstallmentPlan : Swift.Codable, Swift.Equatable {
  public var months: Swift.String?
  public var adminFees: Swift.String?
  public var monthlyAmount: Swift.String?
  public enum CodingKeys : Swift.String, Swift.CodingKey {
    case months
    case adminFees
    case monthlyAmount
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias RawValue = Swift.String
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public init(months: Swift.String?, adminFees: Swift.String?, monthlyAmount: Swift.String?)
  required public init(from decoder: any Swift.Decoder) throws
  public static func == (lhs: FawryPaySDK.AmanInstallmentPlan, rhs: FawryPaySDK.AmanInstallmentPlan) -> Swift.Bool
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
}
extension Foundation.Data {
  public func sha256() -> Swift.String
}
extension Swift.String {
  public func sha256() -> Swift.String
}
public struct RedeemedLoyaltyModel {
  public var redeemedPoints: Swift.Double
  public var loyaltyDicountAmount: Swift.Double
}
@objc @_inheritsConvenienceInitializers public class ForsaManager : ObjectiveC.NSObject {
  public func forsaManagerLauncher(onGetForsaInstallmentPlansCallBacks: FawryPaySDK.CallBacks<[FawryPaySDK.GetForsaInstallmentPlansResponse]>, onForsaCreateLoanCallBacks: FawryPaySDK.CallBacks<FawryPaySDK.CreateLoanResponse>, onPayUsingForsaCallBacks: FawryPaySDK.CallBacks<FawryPaySDK.PaymentChargeResponse>)
  public func getForsaInstallmentPlans(forsaCustomerMobileNumber: Swift.String, downPayment: Swift.Double, validateVoucherRequestParams: FawryPaySDK.FPValidateVoucherRequestParams? = nil, callBacks: FawryPaySDK.CallBacks<[FawryPaySDK.GetForsaInstallmentPlansResponse]>)
  public func forsaCreateLoan(forsaCustomerNumber: Swift.String, downPayment: Swift.Double, orderRefNumber: Swift.String, installmentPlan: FawryPaySDK.ForsaInstallmentPlanModel, resendOTP: Swift.Bool = false, callBacks: FawryPaySDK.CallBacks<FawryPaySDK.CreateLoanResponse>)
  public func payUsingForsa(orderRefNumber: Swift.String, otpString: Swift.String, validateVoucherRequestParams: FawryPaySDK.FPValidateVoucherRequestParams? = nil, callBacks: FawryPaySDK.CallBacks<FawryPaySDK.PaymentChargeResponse>)
  public func getForsaInstallmentPlansStep1(forsaCustomerMobileNumber: Swift.String, downPayment: Swift.Double, validateVoucherRequestParams: FawryPaySDK.FPValidateVoucherRequestParams? = nil)
  public func forsaCreateLoanStep2(forsaCustomerNumber: Swift.String, downPayment: Swift.Double, orderRefNumber: Swift.String, installmentPlan: FawryPaySDK.ForsaInstallmentPlanModel, resendOTP: Swift.Bool = false)
  public func payUsingForsaStep3(orderRefNumber: Swift.String, otpString: Swift.String, validateVoucherRequestParams: FawryPaySDK.FPValidateVoucherRequestParams? = nil)
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class LoyaltyManager : ObjectiveC.NSObject {
  public func LoyaltyManagerLauncher(onPayByLoyaltyCallBacks: FawryPaySDK.CallBacks<FawryPaySDK.PaymentChargeResponse>, onGetCustomerPointsCallBacks: FawryPaySDK.CallBacks<FawryPaySDK.CustomerPointsResponse>)
  public func getCustomerPoints(callBacks: FawryPaySDK.CallBacks<FawryPaySDK.CustomerPointsResponse>)
  public func payUsingLoyalty(customerPoints: FawryPaySDK.CustomerPointsResponse, callBacks: FawryPaySDK.CallBacks<FawryPaySDK.PaymentChargeResponse>)
  public func getCustomerPointsStep1()
  public func payUsingLoyaltyStep2(customerPoints: FawryPaySDK.CustomerPointsResponse)
  @objc override dynamic public init()
  @objc deinit
}
public class CardDetailsModel : Swift.Codable {
  public var cardNumber: Swift.String?
  public var cardExpiryMonth: Swift.String?
  public var cardExpiryYear: Swift.String?
  public var cvv: Swift.String?
  public var cardHolderName: Swift.String?
  public init(card_number: Swift.String?, cardExpiryMonth: Swift.String?, cardExpiryYear: Swift.String?, cvv: Swift.String?, cardHolderName: Swift.String?)
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
extension UIKit.UIImage {
  public func pixelBuffer(width: Swift.Int, height: Swift.Int) -> CoreVideo.CVPixelBuffer?
  public func pixelBufferGray(width: Swift.Int, height: Swift.Int) -> CoreVideo.CVPixelBuffer?
  public func pixelBufferGray() -> CoreVideo.CVPixelBuffer?
  public func areCornerPixelsBlack() -> Swift.Bool
}
extension UIKit.UIImage {
  convenience public init?(pixelBuffer: CoreVideo.CVPixelBuffer)
  convenience public init?(pixelBuffer: CoreVideo.CVPixelBuffer, context: CoreImage.CIContext)
}
extension UIKit.UIImage {
  @nonobjc public class func fromByteArrayRGBA(_ bytes: [Swift.UInt8], width: Swift.Int, height: Swift.Int, scale: CoreFoundation.CGFloat = 0, orientation: UIKit.UIImage.Orientation = .up) -> UIKit.UIImage?
  @nonobjc public class func fromByteArrayGray(_ bytes: [Swift.UInt8], width: Swift.Int, height: Swift.Int, scale: CoreFoundation.CGFloat = 0, orientation: UIKit.UIImage.Orientation = .up) -> UIKit.UIImage?
}
public struct TenureItem : Swift.Codable, Swift.Equatable {
  public init(tenorMonth: Swift.Int?, adminFees: Swift.Double?, downPayment: Swift.Double?, emi: Swift.Double?)
  public init(from decoder: any Swift.Decoder) throws
  public static func == (a: FawryPaySDK.TenureItem, b: FawryPaySDK.TenureItem) -> Swift.Bool
  public func encode(to encoder: any Swift.Encoder) throws
}
public struct CreateLoanResponse : Swift.Codable {
  public var detail: Swift.String?
  public var loanId: Swift.Int?
  public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
}
public struct CustomerPointsResponse : Swift.Codable {
  public let pointsValue: Swift.Double?
  public let points: Swift.Double?
  public let minRedemptionPoints: Swift.Double?
  public let accountId: Swift.String?
  public let accountTypeCode: Swift.String?
  public init(pointsValue: Swift.Double?, points: Swift.Double?, minRedemptionPoints: Swift.Double?, accountId: Swift.String?, accountTypeCode: Swift.String?)
  public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
}
public class AccountTypeDataModels : Swift.Codable {
  final public let acctTypeCode: Swift.String?
  final public let pmtSchemeCode: Swift.String?
  final public let threeDSecuredEnabled: Swift.Bool?
  final public let code: Swift.String?, primaryLangName: Swift.String?, secondaryLangName: Swift.String?, primaryLangDescription: Swift.String?
  final public let isDefault: Swift.Bool?
  final public let status: Swift.String?
  final public let manageByFawry: Swift.Bool?
  final public let acctProfileList: [Swift.String]?
  final public let paNS: [Swift.String]?
  final public let activatonCriteria: Swift.String?
  final public let isPaymentEnabled: Swift.Bool?
  public enum CodingKeys : Swift.String, Swift.CodingKey {
    case acctTypeCode, pmtSchemeCode, threeDSecuredEnabled, code, primaryLangName, secondaryLangName, primaryLangDescription
    case isDefault
    case status, manageByFawry, acctProfileList
    case paNS
    case activatonCriteria, isPaymentEnabled
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias RawValue = Swift.String
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@available(iOS 11.2, *)
public struct SsdDetect {
  public var allSSDBoxes: FawryPaySDK.DetectedAllBoxes {
    get
  }
  public init()
  public static func initializeModels(contentsOf url: Foundation.URL)
  public mutating func predict(image: UIKit.UIImage) -> Swift.String?
}
@objc @_inheritsConvenienceInitializers public class FawryPayByRefManager : ObjectiveC.NSObject {
  public func payByReferenceManagerLauncher(onpayByReferenceCallBacks: FawryPaySDK.CallBacks<FawryPaySDK.PaymentChargeResponse>)
  public func hitFawryPayPayment(validateVoucherRequestParams: FawryPaySDK.FPValidateVoucherRequestParams? = nil)
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor @preconcurrency open class AddCardViewController : FawryPaySDK.BaseViewController {
  @objc @IBOutlet @_Concurrency.MainActor @preconcurrency open var backgroundView: UIKit.UIView!
  @_Concurrency.MainActor @preconcurrency public var cardModel: FawryPaySDK.CardDetailsModel?
  public typealias onCompletion = () -> Swift.Void
  public typealias onErrorHandler = (FawryPaySDK.FawryError?) -> Swift.Void
  public typealias onAddNewCard = (FawryPaySDK.SavedCard) -> Swift.Void
  public typealias onDismiss = () -> Swift.Void
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func viewDidLoad()
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
extension UIKit.UIViewController {
  @_Concurrency.MainActor @preconcurrency public var isModal: Swift.Bool {
    get
  }
}
public struct SectionModel {
}
@objc public protocol ScanDelegate {
  @objc func userDidCancel(_ scanViewController: FawryPaySDK.ScanViewController)
  @objc func userDidScanCard(_ scanViewController: FawryPaySDK.ScanViewController, creditCard: FawryPaySDK.CreditCard)
  @objc optional func userDidScanQrCode(_ scanViewController: FawryPaySDK.ScanViewController, payload: Swift.String)
  @objc func userDidSkip(_ scanViewController: FawryPaySDK.ScanViewController)
}
@objc public protocol ScanStringsDataSource {
  @objc func scanCard() -> Swift.String
  @objc func positionCard() -> Swift.String
  @objc func backButton() -> Swift.String
  @objc func skipButton() -> Swift.String
}
@objc public class CreditCard : ObjectiveC.NSObject {
  @objc public var number: Swift.String
  @objc public var expiryMonth: Swift.String?
  @objc public var expiryYear: Swift.String?
  @objc public var name: Swift.String?
  @objc public var image: UIKit.UIImage?
  public init(number: Swift.String)
  @objc public func expiryForDisplay() -> Swift.String?
  @objc deinit
}
@_inheritsConvenienceInitializers @objc @_Concurrency.MainActor @preconcurrency public class ScanViewController : FawryPaySDK.ScanBaseViewController {
  @_Concurrency.MainActor @preconcurrency weak public var scanDelegate: (any FawryPaySDK.ScanDelegate)?
  @objc @_Concurrency.MainActor @preconcurrency weak public var stringDataSource: (any FawryPaySDK.ScanStringsDataSource)?
  @objc @_Concurrency.MainActor @preconcurrency public var allowSkip: Swift.Bool
  @_Concurrency.MainActor @preconcurrency public var scanQrCode: Swift.Bool
  @objc @_Concurrency.MainActor @preconcurrency public var hideBackButtonImage: Swift.Bool
  @objc @_Concurrency.MainActor @preconcurrency public var backButtonImage: UIKit.UIImage?
  @objc @_Concurrency.MainActor @preconcurrency public var backButtonColor: UIKit.UIColor?
  @objc @_Concurrency.MainActor @preconcurrency public var backButtonFont: UIKit.UIFont?
  @objc @_Concurrency.MainActor @preconcurrency public var scanCardFont: UIKit.UIFont?
  @objc @_Concurrency.MainActor @preconcurrency public var positionCardFont: UIKit.UIFont?
  @objc @_Concurrency.MainActor @preconcurrency public var skipButtonFont: UIKit.UIFont?
  @objc @_Concurrency.MainActor @preconcurrency public var backButtonImageToTextDelta: Foundation.NSNumber?
  @objc @_Concurrency.MainActor @preconcurrency public static func createViewController(withDelegate delegate: (any FawryPaySDK.ScanDelegate)? = nil) -> FawryPaySDK.ScanViewController?
  @objc @_Concurrency.MainActor @preconcurrency public func cancel(callDelegate: Swift.Bool)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func viewDidLoad()
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func viewWillAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func viewDidLayoutSubviews()
  @_Concurrency.MainActor @preconcurrency @objc override public func showCardNumber(_ number: Swift.String, expiry: Swift.String?)
  @_Concurrency.MainActor @preconcurrency @objc override public func onScannedCard(number: Swift.String, expiryYear: Swift.String?, expiryMonth: Swift.String?, scannedImage: UIKit.UIImage?)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
public struct Select_CancelTenureResponse : Swift.Codable {
  public let isSuccess: Swift.Bool?
  public let errors: FawryPaySDK.ErrorResponse?
  public let success: Swift.Bool?
  public let error: FawryPaySDK.ErrorResponse?
  public init(isSuccess: Swift.Bool?, errors: FawryPaySDK.ErrorResponse?, success: Swift.Bool?, error: FawryPaySDK.ErrorResponse?)
  public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
}
public struct ErrorResponse : Swift.Codable {
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers public class MerchantModel : Swift.Codable {
  public var type: Swift.String?
  public var shippingStatus: Swift.String?
  public var paymentMethods: [FawryPaySDK.PaymentMethods]?
  public var cyberSourceEnabled: Swift.Bool?
  public var statusCode: Swift.Int?
  public var statusDescription: Swift.String?
  public var requestUID: Swift.String?
  public var asyncReqUID: Swift.String?
  public var accountTypesDataModels: [FawryPaySDK.AccountTypeDataModels]?
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers public class MerchantDataModelInfo : Swift.Codable {
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@objc @_inheritsConvenienceInitializers public class SouhoolaManager : ObjectiveC.NSObject {
  public func souhoolaManagerLauncher(onGetSouhoolaInstallmentPlansCallBacks: FawryPaySDK.CallBacks<FawryPaySDK.GetSouhoolaInstallmentPlansResponse>, onGetSouhoolaDownPaymentCallBacks: FawryPaySDK.CallBacks<[FawryPaySDK.TenureInstallmentPlans]>, onGetSouhoolaSelectedTenureCallBacks: FawryPaySDK.CallBacks<Swift.Bool>, onGetSouhoolaSelectedTenureSeamlessCallBacks: FawryPaySDK.CallBacks<FawryPaySDK.Select_CancelTenureResponse>, onGetSouhoolaReviewTransactionDataCallBacks: FawryPaySDK.CallBacks<FawryPaySDK.ReviewTransactionResponse>, onSendOTPCallBacks: FawryPaySDK.CallBacks<FawryPaySDK.SendOTPResponse>, onPayUsingSouhoolaCallBacks: FawryPaySDK.CallBacks<FawryPaySDK.PaymentChargeResponse>, onCancelTransactionCallBacks: FawryPaySDK.CallBacks<FawryPaySDK.Select_CancelTenureResponse>)
  public func getSouhoolaInstallmentPlans(souhoolaCustomerNumber: Swift.String, customerPassword: Swift.String, validateVoucherRequestParams: FawryPaySDK.FPValidateVoucherRequestParams? = nil, callBacks: FawryPaySDK.CallBacks<FawryPaySDK.GetSouhoolaInstallmentPlansResponse>)
  public func getSouhoolaEditDownPayment(fawryReferenceNumber: Swift.String, downPayment: Swift.Double, callBacks: FawryPaySDK.CallBacks<[FawryPaySDK.TenureInstallmentPlans]>)
  public func getSelectedTenure(referenceNumber: Swift.String, tenure: Swift.Int, offerCode: Swift.String, callBacks: FawryPaySDK.CallBacks<Swift.Bool>)
  public func getSelectedTenureSeamless(referenceNumber: Swift.String, tenure: Swift.Int, offerCode: Swift.String, callBacks: FawryPaySDK.CallBacks<FawryPaySDK.Select_CancelTenureResponse>)
  public func getReviewTransactionData(fawryReferenceNumber: Swift.String, callBacks: FawryPaySDK.CallBacks<FawryPaySDK.ReviewTransactionResponse>)
  public func sendOTP(fawryReferenceNumber: Swift.String, resendOTP: Swift.Bool = false, callBacks: FawryPaySDK.CallBacks<FawryPaySDK.SendOTPResponse>)
  public func payUsingSouhoola(fawryReferenceNumber: Swift.String, otpString: Swift.String, validateVoucherRequestParams: FawryPaySDK.FPValidateVoucherRequestParams? = nil, callBacks: FawryPaySDK.CallBacks<FawryPaySDK.PaymentChargeResponse>)
  public func cancelTransaction(fawryReferenceNumber: Swift.String, callBacks: FawryPaySDK.CallBacks<FawryPaySDK.Select_CancelTenureResponse>)
  public func getSouhoolaInstallmentPlansStep1(souhoolaCustomerNumber: Swift.String, customerPassword: Swift.String, validateVoucherRequestParams: FawryPaySDK.FPValidateVoucherRequestParams? = nil)
  public func getSouhoolaEditDownPaymentStep2(fawryReferenceNumber: Swift.String, downPayment: Swift.Double)
  public func getSelectedTenureStep3(fawryReferenceNumber: Swift.String, tenure: Swift.Int, offerCode: Swift.String)
  public func getReviewTransactionDataStep4(fawryReferenceNumber: Swift.String)
  public func sendOTPStep5(fawryReferenceNumber: Swift.String, resendOTP: Swift.Bool = false)
  public func cancelTransactionStep6(fawryReferenceNumber: Swift.String)
  public func payUsingSouhoolaStep7(fawryReferenceNumber: Swift.String, otpString: Swift.String, validateVoucherRequestParams: FawryPaySDK.FPValidateVoucherRequestParams? = nil)
  @objc override dynamic public init()
  @objc deinit
}
@objc @_Concurrency.MainActor @preconcurrency open class RadioButtonContainerView : UIKit.UIView {
  @_Concurrency.MainActor @preconcurrency public var buttonContainer: FawryPaySDK.RadioButtonContainer {
    get
  }
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open func didAddSubview(_ subview: UIKit.UIView)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open func willRemoveSubview(_ subview: UIKit.UIView)
  @_Concurrency.MainActor @preconcurrency public func addButton(_ button: FawryPaySDK.RadioButtonContainer.Kind)
  @_Concurrency.MainActor @preconcurrency public func removeButton(_ view: FawryPaySDK.RadioButtonContainer.Kind)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor @preconcurrency open class BaseViewController : UIKit.UIViewController {
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open var supportedInterfaceOrientations: UIKit.UIInterfaceOrientationMask {
    @objc get
  }
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open var preferredInterfaceOrientationForPresentation: UIKit.UIInterfaceOrientation {
    @objc get
  }
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open var shouldAutorotate: Swift.Bool {
    @objc get
  }
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open var preferredStatusBarStyle: UIKit.UIStatusBarStyle {
    @objc get
  }
  @objc deinit
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open func viewWillAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open func viewDidAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open func viewDidLoad()
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder: Foundation.NSCoder)
}
extension FawryPaySDK.BaseViewController : UIKit.UIGestureRecognizerDelegate {
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func gestureRecognizerShouldBegin(_ gestureRecognizer: UIKit.UIGestureRecognizer) -> Swift.Bool
}
public typealias onCompletion = (FawryPaySDK.FawrySDKStatusCode?) -> Swift.Void
public typealias onPreCompletion = (FawryPaySDK.FawryError?) -> Swift.Void
public typealias onErrorHandler = (FawryPaySDK.FawryError?) -> Swift.Void
public typealias onSuccessHandler = (Any?) -> Swift.Void
public typealias onPaymentCompletedHandler = (Any?) -> Swift.Void
public typealias onDismissHandler = () -> Swift.Void
public struct ProductItem : Swift.Codable {
  public let productPrice: Swift.Double?
  public let orderId: Swift.String?
  public let financedAmount: Swift.Double?
  public let tenureList: [FawryPaySDK.TenureItem]?
  public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
}
public enum ReachabilityError : Swift.Error {
  case failedToCreateWithAddress(Darwin.sockaddr, Swift.Int32)
  case failedToCreateWithHostname(Swift.String, Swift.Int32)
  case unableToSetCallback(Swift.Int32)
  case unableToSetDispatchQueue(Swift.Int32)
  case unableToGetFlags(Swift.Int32)
}
@available(*, unavailable, renamed: "Notification.Name.reachabilityChanged")
public let ReachabilityChangedNotification: Foundation.NSNotification.Name
extension Foundation.NSNotification.Name {
  public static let reachabilityChanged: Foundation.Notification.Name
}
public class Reachability {
  public typealias NetworkReachable = (FawryPaySDK.Reachability) -> Swift.Void
  public typealias NetworkUnreachable = (FawryPaySDK.Reachability) -> Swift.Void
  @available(*, unavailable, renamed: "Connection")
  public enum NetworkStatus : Swift.CustomStringConvertible {
    case notReachable, reachableViaWiFi, reachableViaWWAN
    public var description: Swift.String {
      get
    }
    public static func == (a: FawryPaySDK.Reachability.NetworkStatus, b: FawryPaySDK.Reachability.NetworkStatus) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public enum Connection : Swift.CustomStringConvertible {
    @available(*, deprecated, renamed: "unavailable")
    case none
    case unavailable, wifi, cellular
    public var description: Swift.String {
      get
    }
    public static func == (a: FawryPaySDK.Reachability.Connection, b: FawryPaySDK.Reachability.Connection) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public var whenReachable: FawryPaySDK.Reachability.NetworkReachable?
  public var whenUnreachable: FawryPaySDK.Reachability.NetworkUnreachable?
  @available(*, deprecated, renamed: "allowsCellularConnection")
  final public let reachableOnWWAN: Swift.Bool
  public var allowsCellularConnection: Swift.Bool
  public var notificationCenter: Foundation.NotificationCenter
  @available(*, deprecated, renamed: "connection.description")
  public var currentReachabilityString: Swift.String {
    get
  }
  @available(*, unavailable, renamed: "connection")
  public var currentReachabilityStatus: FawryPaySDK.Reachability.Connection {
    get
  }
  public var connection: FawryPaySDK.Reachability.Connection {
    get
  }
  required public init(reachabilityRef: SystemConfiguration.SCNetworkReachability, queueQoS: Dispatch.DispatchQoS = .default, targetQueue: Dispatch.DispatchQueue? = nil, notificationQueue: Dispatch.DispatchQueue? = .main)
  convenience public init(hostname: Swift.String, queueQoS: Dispatch.DispatchQoS = .default, targetQueue: Dispatch.DispatchQueue? = nil, notificationQueue: Dispatch.DispatchQueue? = .main) throws
  convenience public init(queueQoS: Dispatch.DispatchQoS = .default, targetQueue: Dispatch.DispatchQueue? = nil, notificationQueue: Dispatch.DispatchQueue? = .main) throws
  @objc deinit
}
extension FawryPaySDK.Reachability {
  public func startNotifier() throws
  public func stopNotifier()
  @available(*, deprecated, message: "Please use `connection != .none`")
  public var isReachable: Swift.Bool {
    get
  }
  @available(*, deprecated, message: "Please use `connection == .cellular`")
  public var isReachableViaWWAN: Swift.Bool {
    get
  }
  @available(*, deprecated, message: "Please use `connection == .wifi`")
  public var isReachableViaWiFi: Swift.Bool {
    get
  }
  public var description: Swift.String {
    get
  }
}
public enum SectionType {
  case textOnly
  case textWithArrow
  case noText
  case addAddress
  public static func == (a: FawryPaySDK.SectionType, b: FawryPaySDK.SectionType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public class SectionViewModel {
  public init(rowViewModels: [any FawryPaySDK.RowViewModel], isEnable: Swift.Bool, sectionHeight: Swift.Float, sectionModel: FawryPaySDK.SectionModel?, sectionType: FawryPaySDK.SectionType?, themeStyle: FawryPaySDK.ThemeStyleFawryPaySDK? = nil)
  public init(rowViewModels: [any FawryPaySDK.RowViewModel], isEnable: Swift.Bool, sectionHeight: Swift.Float, sectionModel: FawryPaySDK.SectionModel?, sectionType: FawryPaySDK.SectionType?, themeStyle: FawryPaySDK.ThemeStyleFawryPaySDK? = nil, dimmed: Swift.Bool)
  @objc deinit
}
public struct TenureInstallmentPlans : Swift.Codable, Swift.Equatable {
  public let tenure: Swift.Int?
  public let installment: Swift.Double?
  public let isSelected: Swift.Bool?
  public let tenureNo: Swift.Int?
  public let installmentAmount: Swift.Double?
  public let adminFees: Swift.Double?
  public let offerCode: Swift.String?
  public let offerDescription: Swift.String?
  public let selected: Swift.Bool?
  public init(tenure: Swift.Int?, installment: Swift.Double?, isSelected: Swift.Bool?, tenureNo: Swift.Int?, installmentAmount: Swift.Double?, adminFees: Swift.Double?, offerCode: Swift.String?, offerDescription: Swift.String?, selected: Swift.Bool?)
  public init(from decoder: any Swift.Decoder) throws
  public static func == (a: FawryPaySDK.TenureInstallmentPlans, b: FawryPaySDK.TenureInstallmentPlans) -> Swift.Bool
  public func encode(to encoder: any Swift.Encoder) throws
}
@objc public class AVLInfo : ObjectiveC.NSObject, Swift.Codable {
  public var onUsBTC: Swift.Int?
  public var offUsBTC: Swift.Int?
  public var internationalBANs: [Swift.String]?
  public var BANValidationSize: Swift.Int?
  public var onUsAvlFees: Swift.Double?
  public var offUsAvlFees: Swift.Double?
  public var minValue: Swift.Double?
  public var maxValue: Swift.Double?
  public var avlValue: Swift.Double?
  public var billingAcct: Swift.String?
  public var beneficiaryWalletNumber: Swift.String?
  public var beneficiaryName: Swift.String?
  public var avlAmountDataType: FawryPaySDK.AVLAmountDataType
  public var shouldShowBeneficiaryName: Swift.Bool
  public var shouldShowReasonOfTransfer: Swift.Bool
  public var reasonOfTransfer: Swift.String?
  public var screenTitle: Swift.String?
  public init(onUsBTC: Swift.Int? = nil, offUsBTC: Swift.Int? = nil, internationalBANs: [Swift.String]? = nil, BANValidationSize: Swift.Int? = nil, onUsAvlFees: Swift.Double? = nil, offUsAvlFees: Swift.Double? = nil, minValue: Swift.Double? = nil, maxValue: Swift.Double? = nil, avlValue: Swift.Double? = nil, billingAcct: Swift.String? = nil, beneficiaryWalletNumber: Swift.String? = nil, beneficiaryName: Swift.String? = nil, avlAmountDataType: FawryPaySDK.AVLAmountDataType = .double, shouldShowBeneficiaryName: Swift.Bool = true, shouldShowReasonOfTransfer: Swift.Bool = true, reasonOfTransfer: Swift.String? = nil, screenTitle: Swift.String? = nil)
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
public enum AVLAmountDataType : Swift.Codable {
  case double
  case integer
  public static func == (a: FawryPaySDK.AVLAmountDataType, b: FawryPaySDK.AVLAmountDataType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public func encode(to encoder: any Swift.Encoder) throws
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
public enum SDKMode : Swift.String {
  case addCard
  case choosePaymentMethod
  case addressManager
  case listAddresses
  case addAddress
  case savedCards
  case cartDetails
  case addressShipping
  case myPoints
  case createVoucher
  case selectAddress
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum ViewType : Swift.String {
  case addCard
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum FawrySDKResponseCode : Swift.Int {
  case successfullyLoaded
  case userError
  case userCanclled
  case generalError
  case successSavedUserCard
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public enum FawrySDKStatusCode : Swift.Int, Swift.Codable {
  case success
  case userDidCancel
  case userDidBack
  case sdkNotIntitalized
  case paramterMissing
  case contollerNotFound
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor @preconcurrency public class PreviewView : UIKit.UIView {
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public class var layerClass: Swift.AnyClass {
    @objc get
  }
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func layoutSubviews()
  @objc deinit
}
public struct RadioButtonCircleStyle {
  public init(outerCircle: CoreFoundation.CGFloat = 16, innerCircle: CoreFoundation.CGFloat = 7, outerCircleBorder: CoreFoundation.CGFloat = 2, contentPadding: CoreFoundation.CGFloat = 6)
  public init(outerCircle: CoreFoundation.CGFloat, innerCircle: CoreFoundation.CGFloat)
  public init(outerCircle: CoreFoundation.CGFloat, innerCircle: CoreFoundation.CGFloat, outerCircleBorder: CoreFoundation.CGFloat)
}
public struct GetForsaInstallmentPlansResponse : Swift.Codable {
  public var id: Swift.Int?
  public var title: Swift.String?
  public var forsaInstallmentPlanModels: [FawryPaySDK.ForsaInstallmentPlanModel]?
  public var downPaymentEnabled: Swift.Bool?
  public var orderRefNumber: Swift.String?
  public init(id: Swift.Int?, title: Swift.String?, forsaInstallmentPlanModels: [FawryPaySDK.ForsaInstallmentPlanModel]?, downPaymentEnabled: Swift.Bool?, orderRefNumber: Swift.String?)
  public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
}
public protocol CustomLocalizedErrorProtocol : Foundation.LocalizedError {
  var title: Swift.String? { get }
  var code: Swift.Int { get }
}
@_hasMissingDesignatedInitializers @objc public class OrderingPaySDKError : ObjectiveC.NSObject, FawryPaySDK.CustomLocalizedErrorProtocol {
  @objc public var title: Swift.String?
  @objc public var code: Swift.Int
  @objc public var errorDescription: Swift.String? {
    @objc get
  }
  @objc public var failureReason: Swift.String? {
    @objc get
  }
  @objc public var returnedResponse: Any?
  @objc deinit
}
public protocol RadioButtonDelegate : AnyObject {
  func radioButtonDidSelect(_ button: FawryPaySDK.RadioButton)
  func radioButtonDidDeselect(_ button: FawryPaySDK.RadioButton)
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor @preconcurrency public class RadioButton : FawryPaySDK.RadioCheckboxBaseButton {
  @_Concurrency.MainActor @preconcurrency weak public var delegate: (any FawryPaySDK.RadioButtonDelegate)?
  @_Concurrency.MainActor @preconcurrency public var radioCircle: FawryPaySDK.RadioButtonCircleStyle {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var radioButtonColor: FawryPaySDK.RadioButtonColor! {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @objc deinit
}
extension UIKit.UIColor {
  public static var themeColor: UIKit.UIColor {
    get
  }
  public static var lightBorderColor: UIKit.UIColor {
    get
  }
  public static var darkBorderColor: UIKit.UIColor {
    get
  }
  public static var shadowColor: UIKit.UIColor {
    get
  }
  public static var darkBackgroundColor: UIKit.UIColor {
    get
  }
  public static var lightBackgroundColor: UIKit.UIColor {
    get
  }
  public static var intermidiateBackgroundColor: UIKit.UIColor {
    get
  }
  public static var customDarkTextColor: UIKit.UIColor {
    get
  }
  public static var customLightTextColor: UIKit.UIColor {
    get
  }
  public static var intermidiateTextColor: UIKit.UIColor {
    get
  }
  public static var affirmationColor: UIKit.UIColor {
    get
  }
  public static var negationColor: UIKit.UIColor {
    get
  }
  public static var selectedPlanBackground: UIKit.UIColor {
    get
  }
}
public class FawryLaunchModel : Swift.Codable {
  public init(customer: FawryPaySDK.LaunchCustomerModel?, merchant: FawryPaySDK.LaunchMerchantModel?, chargeItems: [FawryPaySDK.ChargeItemsParamsModel]?, signature: Swift.String?, allowVoucher: Swift.Bool = false, beneficiaryName: Swift.String? = nil, beneficiaryWalletNumber: Swift.String? = nil, avlFees: Swift.Double? = nil, paymentWithCardToken: Swift.Bool = false, skipReceipt: Swift.Bool = true, skipCustomerInput: Swift.Bool = false, paymentMethod: FawryPaySDK.Payment_Method = .all, orderRefNumber: Swift.String? = nil, paymentChargeResponse: FawryPaySDK.PaymentChargeResponse? = nil, externalPaymentMethods: [FawryPaySDK.PaymentMethods]? = nil, avlInfo: FawryPaySDK.AVLInfo? = nil, checkoutModel: FawryPaySDK.LaunchCheckoutModel? = nil, applePayModel: FawryPaySDK.LaunchApplePayModel? = nil)
  required public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
  @objc deinit
}
public struct SendOTPResponse : Swift.Codable {
  public let isSuccess: Swift.Bool?
  public let errors: FawryPaySDK.ErrorResponse?
  public let success: Swift.Bool?
  public let error: FawryPaySDK.ErrorResponse?
  public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
}
public enum ServiceTypeCode : Swift.String {
  case pickup
  case delivery
  case dineIn
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public class PaymentChargeResponse : Swift.Codable {
  public var merchantRefNumber: Swift.String?
  public var statusDescription: Swift.String?
  public var customerMail: Swift.String?
  public var type: Swift.String?
  public var referenceNumber: Swift.String?
  public var migsTransactionNumber: Swift.Int?
  public var customerProfileId: Swift.String?
  public var expirationTime: Swift.Double?
  public var paymentMethod: Swift.String?
  public var customerMobile: Swift.String?
  public var signature: Swift.String?
  public var statusCode: Swift.Int?
  public var fawryFees: Swift.Double?
  public var paymentAmount: Swift.Double?
  public var orderAmount: Swift.Double?
  public var amount: Swift.Double?
  public var walletQr: Swift.String?
  public var shippingFees: Swift.Double?
  public var nextAction: FawryPaySDK.NextActionModel?
  public var taxes: Swift.Double?
  public var branchServiceFees: Swift.Double?
  public var usedBTC: Swift.Int?
  public var orderStatus: Swift.String?
  public var interestAmount: Swift.Double?
  public var upFrontFees: Swift.Double?
  public var valUBillData: FawryPaySDK.ValuBillDataModel?
  public var loanNumber: Swift.String?
  public var downPayment: Swift.Double?
  public var totalFinancedAmount: Swift.Double?
  public var adminFees: Swift.String?
  public var interestRate: Swift.Double?
  public var customerProperties: FawryPaySDK.CustomerProperties?
  public var paymentTime: Swift.Int?
  public var paymentMethodName: Swift.String?
  public var promoTotalDiscount: Swift.Double?
  public var monetaryValue: Swift.Double?
  public var orderApiKey: Swift.String?
  public var basketPayment: Swift.Bool?
  public var requestUID: Swift.String?
  public init()
  public init(merchantRefNumber: Swift.String?, statusDescription: Swift.String?, customerMail: Swift.String?, type: Swift.String?, referenceNumber: Swift.String?, customerProfileId: Swift.String?, expirationTime: Swift.Double?, paymentMethod: Swift.String?, customerMobile: Swift.String?, signature: Swift.String?, statusCode: Swift.Int?, fawryFees: Swift.Double?, paymentAmount: Swift.Double?, orderAmount: Swift.Double?, walletQr: Swift.String?, shippingFees: Swift.Double?, nextAction: FawryPaySDK.NextActionModel?, usedBTC: Swift.Int?, orderStatus: Swift.String?, interestAmount: Swift.Double?, upFrontFees: Swift.Double?, valUBillData: FawryPaySDK.ValuBillDataModel? = nil, loanNumber: Swift.String?, downPayment: Swift.Double?, totalFinancedAmount: Swift.Double?, adminFees: Swift.String?, interestRate: Swift.Double?, migsTransactionNumber: Swift.Int?, amount: Swift.Double?, customerProperties: FawryPaySDK.CustomerProperties?, paymentTime: Swift.Int?, taxes: Swift.Double?, paymentMethodName: Swift.String?, promoTotalDiscount: Swift.Double? = nil, monetaryValue: Swift.Double? = nil, orderApiKey: Swift.String? = nil, basketPayment: Swift.Bool? = nil, requestUID: Swift.String? = nil)
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
public struct CustomerProperties : Swift.Codable {
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct NextActionModel : Swift.Codable {
  public init(redirectUrl: Swift.String?, redirectType: Swift.String?)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers public class AmanPlansResponse : Swift.Codable {
  public enum CodingKeys : Swift.String, Swift.CodingKey {
    case requestedAmount
    case totalAmount
    case installmentPlans
    case orderReferenceNumber
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias RawValue = Swift.String
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  required public init(from decoder: any Swift.Decoder) throws
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
}
public class AmanOtpResponse : Swift.Codable {
  public enum CodingKeys : Swift.String, Swift.CodingKey {
    case resultId
    case resultMessage
    case comment
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias RawValue = Swift.String
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  required public init(from decoder: any Swift.Decoder) throws
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
}
public enum RadioCheckboxStyle {
  case rounded(radius: CoreFoundation.CGFloat), square, circle
}
@objc @_inheritsConvenienceInitializers @IBDesignable @_Concurrency.MainActor @preconcurrency public class RadioCheckboxBaseButton : UIKit.UIButton {
  @objc @_Concurrency.MainActor @preconcurrency dynamic public var isOn: Swift.Bool {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor @preconcurrency convenience public init?(type buttonType: UIKit.UIButton.ButtonType)
  @_Concurrency.MainActor @preconcurrency public var style: FawryPaySDK.RadioCheckboxStyle {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public func updateSelectionState()
  @objc deinit
}
public struct ScanStats {
  public var scans: Swift.Int
  public var flatDigitsRecognized: Swift.Int
  public var flatDigitsDetected: Swift.Int
  public var embossedDigitsRecognized: Swift.Int
  public var embossedDigitsDetected: Swift.Int
  public var torchOn: Swift.Bool
  public var success: Swift.Bool?
  public var endTime: Foundation.Date?
  public var model: Swift.String?
  public var algorithm: Swift.String?
  public var bin: Swift.String?
  public var lastFlatBoxes: [CoreFoundation.CGRect]?
  public var lastEmbossedBoxes: [CoreFoundation.CGRect]?
  public var deviceType: Swift.String?
  public var numberRect: CoreFoundation.CGRect?
  public var expiryBoxes: [CoreFoundation.CGRect]?
  public var cardsDetected: Swift.Int
  public func toDictionaryForAnalytics() -> [Swift.String : Any]
  public func duration() -> Swift.Double
}
extension FawryPaySDK.AccountTypeInfo.CodingKeys : Swift.Equatable {}
extension FawryPaySDK.AccountTypeInfo.CodingKeys : Swift.Hashable {}
extension FawryPaySDK.AccountTypeInfo.CodingKeys : Swift.RawRepresentable {}
extension FawryPaySDK.MWalletOption : Swift.Equatable {}
extension FawryPaySDK.MWalletOption : Swift.Hashable {}
extension FawryPaySDK.ToastPosition : Swift.Equatable {}
extension FawryPaySDK.ToastPosition : Swift.Hashable {}
extension FawryPaySDK.NetworkError : Swift.Equatable {}
extension FawryPaySDK.NetworkError : Swift.Hashable {}
extension FawryPaySDK.ForsaInstallmentPlanModel.CodingKeys : Swift.Equatable {}
extension FawryPaySDK.ForsaInstallmentPlanModel.CodingKeys : Swift.Hashable {}
extension FawryPaySDK.ForsaInstallmentPlanModel.CodingKeys : Swift.RawRepresentable {}
extension FawryPaySDK.DisplayType : Swift.Equatable {}
extension FawryPaySDK.DisplayType : Swift.Hashable {}
extension FawryPaySDK.DisplayType : Swift.RawRepresentable {}
extension FawryPaySDK.KeyboardType : Swift.Equatable {}
extension FawryPaySDK.KeyboardType : Swift.Hashable {}
extension FawryPaySDK.KeyboardType : Swift.RawRepresentable {}
extension FawryPaySDK.AddressErrorMessages : Swift.Equatable {}
extension FawryPaySDK.AddressErrorMessages : Swift.Hashable {}
extension FawryPaySDK.AddressErrorMessages : Swift.RawRepresentable {}
extension FawryPaySDK.ErrorCode : Swift.Equatable {}
extension FawryPaySDK.ErrorCode : Swift.Hashable {}
extension FawryPaySDK.ErrorCode : Swift.RawRepresentable {}
extension FawryPaySDK.ErrorMessages : Swift.Equatable {}
extension FawryPaySDK.ErrorMessages : Swift.Hashable {}
extension FawryPaySDK.ErrorMessages : Swift.RawRepresentable {}
extension FawryPaySDK.Payment_Method : Swift.Equatable {}
extension FawryPaySDK.Payment_Method : Swift.Hashable {}
extension FawryPaySDK.Payment_Method : Swift.RawRepresentable {}
extension FawryPaySDK.PaymentMethod : Swift.Equatable {}
extension FawryPaySDK.PaymentMethod : Swift.Hashable {}
extension FawryPaySDK.PaymentMethod : Swift.RawRepresentable {}
extension FawryPaySDK.WalletPaymentMethods : Swift.Equatable {}
extension FawryPaySDK.WalletPaymentMethods : Swift.Hashable {}
extension FawryPaySDK.WalletPaymentMethods : Swift.RawRepresentable {}
extension FawryPaySDK.PaymentURLs : Swift.Equatable {}
extension FawryPaySDK.PaymentURLs : Swift.Hashable {}
extension FawryPaySDK.PaymentURLs : Swift.RawRepresentable {}
extension FawryPaySDK.AmanInstallmentPlan.CodingKeys : Swift.Equatable {}
extension FawryPaySDK.AmanInstallmentPlan.CodingKeys : Swift.Hashable {}
extension FawryPaySDK.AmanInstallmentPlan.CodingKeys : Swift.RawRepresentable {}
extension FawryPaySDK.AccountTypeDataModels.CodingKeys : Swift.Equatable {}
extension FawryPaySDK.AccountTypeDataModels.CodingKeys : Swift.Hashable {}
extension FawryPaySDK.AccountTypeDataModels.CodingKeys : Swift.RawRepresentable {}
@available(*, unavailable, renamed: "Connection")
extension FawryPaySDK.Reachability.NetworkStatus : Swift.Equatable {}
@available(*, unavailable, renamed: "Connection")
extension FawryPaySDK.Reachability.NetworkStatus : Swift.Hashable {}
extension FawryPaySDK.Reachability.Connection : Swift.Equatable {}
extension FawryPaySDK.Reachability.Connection : Swift.Hashable {}
extension FawryPaySDK.SectionType : Swift.Equatable {}
extension FawryPaySDK.SectionType : Swift.Hashable {}
extension FawryPaySDK.AVLAmountDataType : Swift.Equatable {}
extension FawryPaySDK.AVLAmountDataType : Swift.Hashable {}
extension FawryPaySDK.SDKMode : Swift.Equatable {}
extension FawryPaySDK.SDKMode : Swift.Hashable {}
extension FawryPaySDK.SDKMode : Swift.RawRepresentable {}
extension FawryPaySDK.ViewType : Swift.Equatable {}
extension FawryPaySDK.ViewType : Swift.Hashable {}
extension FawryPaySDK.ViewType : Swift.RawRepresentable {}
extension FawryPaySDK.FawrySDKResponseCode : Swift.Equatable {}
extension FawryPaySDK.FawrySDKResponseCode : Swift.Hashable {}
extension FawryPaySDK.FawrySDKResponseCode : Swift.RawRepresentable {}
extension FawryPaySDK.FawrySDKStatusCode : Swift.Equatable {}
extension FawryPaySDK.FawrySDKStatusCode : Swift.Hashable {}
extension FawryPaySDK.FawrySDKStatusCode : Swift.RawRepresentable {}
extension FawryPaySDK.ServiceTypeCode : Swift.Equatable {}
extension FawryPaySDK.ServiceTypeCode : Swift.Hashable {}
extension FawryPaySDK.ServiceTypeCode : Swift.RawRepresentable {}
extension FawryPaySDK.AmanPlansResponse.CodingKeys : Swift.Equatable {}
extension FawryPaySDK.AmanPlansResponse.CodingKeys : Swift.Hashable {}
extension FawryPaySDK.AmanPlansResponse.CodingKeys : Swift.RawRepresentable {}
extension FawryPaySDK.AmanOtpResponse.CodingKeys : Swift.Equatable {}
extension FawryPaySDK.AmanOtpResponse.CodingKeys : Swift.Hashable {}
extension FawryPaySDK.AmanOtpResponse.CodingKeys : Swift.RawRepresentable {}
